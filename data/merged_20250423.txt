合并文件: markdown_content_20250423_210327.txt, markdown_content_20250423_210417.txt, markdown_content_20250423_210515.txt, markdown_content_20250423_211058.txt, markdown_content_20250423_211142.txt, markdown_content_20250423_211238.txt, markdown_content_20250423_211313.txt, markdown_content_20250423_211356.txt, markdown_content_20250423_211417.txt, markdown_content_20250423_211540.txt, markdown_content_20250423_211650.txt, markdown_content_20250423_211735.txt
合并时间: 2025-04-23 21:23:25
来源: Huawei Developer


==================================================
文件: markdown_content_20250423_210327.txt
==================================================

URL: https://developer.huawei.com/consumer/cn/doc/harmonyos-guides/application-configuration-file-overview-stage
爬取时间: 2025-04-23 21:03:27
来源: Huawei Developer


==================================================

URL: https://developer.huawei.com/consumer/cn/doc/harmonyos-guides/application-configuration-file-overview-stage
爬取时间: 2025-04-23 21:03:27
来源: Huawei Developer

配置文件示例

先通过一个示例，整体认识一下app.json5配置文件。

``` { "app": { "bundleName": "com.application.myapplication", "vendor": "example", "versionCode": 1000000, "versionName": "1.0.0", "icon": "$media:layered_image", "label": "$string:app_name", "description": "$string:description_application", "minAPIVersion": 9, "targetAPIVersion": 9, "apiReleaseType": "Release", "debug": false, "car": { "minAPIVersion": 8 }, "targetBundleName": "com.application.test", "targetPriority": 50, "appEnvironments": [ { "name":"name1", "value": "value1" } ], "maxChildProcess": 5, "multiAppMode": { "multiAppModeType": "multiInstance", "maxCount": 5 }, "hwasanEnabled": false, "ubsanEnabled": false, "cloudFileSyncEnabled": false, "configuration": "$profile:configuration" }, } ```

配置文件标签

app.json5配置文件包含以下标签。

表1app.json5配置文件标签说明

属性名称含义数据类型是否可缺省bundleName标识应用的Bundle名称，用于标识应用的唯一性。命名规则如下 ：- 必须为以点号（.）分隔的字符串，且至少包含三段，每段中仅允许使用英文字母、数字、下划线（_）。- 首段以英文字母开头，非首段以数字或英文字母开头，每一段以数字或者英文字母结尾。- 不允许多个点号（.）连续出现。- 字符串最小长度为7字节，最大长度128字节。- 推荐采用反域名形式命名（如“com.example.demo”，建议第一级为域名后缀com，第二级为厂商/个人名，第三级为应用名，也可以多级）。对于随系统源码编译的应用，建议命名为“com.ohos.demo”形式，其中的ohos标识系统应用。字符串该标签不可缺省。bundleType标识应用的Bundle类型，用于区分应用或者元服务。支持的取值如下：- app：当前Bundle为应用。- atomicService：当前Bundle为元服务。- shared：当前Bundle为共享库应用，预留字段。- appService：当前Bundle为系统级共享库应用，仅供系统应用使用。字符串该标签可缺省，缺省值为app。debug标识应用是否可调试。- true：可调试，一般用于开发阶段。- false：不可调试，一般用于发布阶段。布尔值由DevEco Studio编译构建时生成。该标签可缺省，缺省值为false。icon标识应用的图标，取值为图标资源文件的索引。字符串该标签不可缺省。label标识应用的名称，取值为字符串资源的索引，字符串长度不超过63字节。字符串该标签不可缺省。description标识应用的描述信息，取值为长度不超过255字节的字符串，内容为描述信息的字符串资源索引。该字段可用于应用信息展示，如在应用的关于页面，取该字段展示应用描述信息。字符串该标签可缺省，缺省值为空。vendor标识对应用开发厂商的描述，取值为长度不超过255字节的字符串。该字段可用于展示开发厂商信息，如在应用的关于页面，取该字段展示开发厂商信息。字符串该标签可缺省，缺省值为空。versionCode标识应用的版本号，取值为小于2^31次方的正整数。此数字仅用于确定某个版本是否比另一个版本更新，数值越大表示版本越高。开发者可以将该值设置为任何正整数，但是必须确保应用的新版本都使用比旧版本更大的值。数值该标签不可缺省。versionName标识向用户展示的应用版本号。取值为长度不超过127字节的字符串，仅由数字和点构成，推荐采用“A.B.C.D”四段式的形式。四段式推荐的含义如下所示。第一段：主版本号/Major，范围0~99，重大修改的版本，如实现新的大功能或重大变化。第二段：次版本号/Minor，范围0~99，表示实现较突出的特点，如新功能添加或大问题修复。第三段：特性版本号/Feature，范围0~99，标识规划的新版本特性。第四段：修订版本号/Patch，范围0~999，表示维护版本，如修复bug。字符串该标签不可缺省。minCompatibleVersionCode标识应用能够兼容的最低历史版本号，用于应用多设备之间协同、数据迁移、跨设备兼容性判断，该字段为预留字段，暂未使用。取值范围为0~2147483647。数值该标签可缺省，缺省值等于versionCode标签值。minAPIVersion标识应用运行需要的SDK的API最小版本。取值范围为0~2147483647。数值应用编译构建时由build-profile.json5中的compatibleSdkVersion自动生成。targetAPIVersion标识应用运行需要的API目标版本。取值范围为0~2147483647。数值应用编译构建时由build-profile.json5中的compileSdkVersion自动生成。apiReleaseType标识应用运行需要的API目标版本的类型，采用字符串类型表示。取值为“CanaryN”、“BetaN”或者“Release”，其中，N代表大于零的整数。- Canary：受限发布的版本。- Beta：公开发布的Beta版本。- Release：公开发布的正式版本。字符串应用编译构建时根据当前使用的SDK的Stage自动生成。即便手动配置了取值，编译构建时也会被覆盖。accessible标识应用是否能访问应用的安装目录，仅针对Stage模型的系统应用和预置应用生效。布尔值该标签可缺省，缺省值为false。multiProjects标识当前工程是否支持多个工程的联合开发。- true：当前工程支持多个工程的联合开发。多工程开发可参考多工程构建。- false：当前工程不支持多个工程的联合开发。布尔值该标签可缺省，缺省值为false。asanEnabled标识应用程序是否开启asan检测，用于辅助定位buffer越界造成的crash问题。- true：当前工程开启asan检测。- false：当前工程不开启asan检测。布尔值该标签可缺省，缺省值为false。tablet标识对tablet设备做的特殊配置，可以配置的属性字段有上文提到的：minAPIVersion。如果使用该属性对tablet设备做了特殊配置，则应用在tablet设备中会采用此处配置的属性值，并忽略在app.json5公共区域配置的属性值。对象该标签可缺省，缺省时tablet设备使用app.json5公共区域配置的属性值。tv标识对tv设备做的特殊配置，可以配置的属性字段有上文提到的：minAPIVersion。如果使用该属性对tv设备做了特殊配置，则应用在tv设备中会采用此处配置的属性值，并忽略在app.json5公共区域配置的属性值。对象该标签可缺省，缺省时tv设备使用app.json5公共区域配置的属性值。wearable标识对wearable设备做的特殊配置，可以配置的属性字段有上文提到的：minAPIVersion。如果使用该属性对wearable设备做了特殊配置，则应用在wearable设备中会采用此处配置的属性值，并忽略在app.json5公共区域配置的属性值。对象该标签可缺省，缺省时wearable设备使用app.json5公共区域配置的属性值。car标识对car设备做的特殊配置，可以配置的属性字段有上文提到的：minAPIVersion。如果使用该属性对car设备做了特殊配置，则应用在car设备中会采用此处配置的属性值，并忽略在app.json5公共区域配置的属性值。对象该标签可缺省，缺省时car设备使用app.json5公共区域配置的属性值。default标识对default设备做的特殊配置，可以配置的属性字段有上文提到的：minAPIVersion。如果使用该属性对default设备做了特殊配置，则应用在default设备中会采用此处配置的属性值，并忽略在app.json5公共区域配置的属性值。对象该标签可缺省，缺省时default设备使用app.json5公共区域配置的属性值。targetBundleName标识当前包所指定的目标应用, 标签值的取值规则和范围与bundleName标签一致。配置该字段的应用为具有overlay特征的应用。字符串该标签可缺省，缺省值为空。targetPriority标识当前应用的优先级，取值范围为1~100。配置targetBundleName字段之后，才支持配置该字段。数值该标签可缺省, 缺省值为1。generateBuildHash标识当前应用的所有HAP和HSP是否由打包工具生成哈希值。该字段配置为true时，该应用下的所有HAP和HSP都会由打包工具生成对应的哈希值。系统OTA升级时，若应用的versionCode保持不变，可根据哈希值判断应用是否需要升级。说明：该字段仅对预置应用生效。布尔值该标签可缺省, 缺省值为false。GWPAsanEnabled标识应用程序是否开启GWP-asan堆内存检测工具，用于对内存越界、内存释放后使用等内存破坏问题进行分析。- true：当前工程开启GWP-asan检测。- false：当前工程不开启GWP-asan检测。布尔值该标签可缺省, 缺省值为false。appEnvironments标识当前模块配置的应用环境变量。对象数组该标签可缺省，缺省值为空。maxChildProcess标识当前应用自身可创建的子进程的最大个数，取值范围为0到512，0表示不限制，当应用有多个模块时，以entry模块的配置为准。数值该标签可缺省，缺省时使用系统配置的默认值。multiAppMode标识当前应用配置的多开模式。仅bundleType为app的应用的entry或feature模块配置有效，存在多个模块时，以entry模块的配置为准。对象该标签可缺省，缺省值为空。hwasanEnabled标识应用程序是否开启HWAsan检测。HWAsan(HardWare-assisted AddressSanitizer)是利用Top-Byte-Ignore特性实现的增强版Asan，与Asan相比HWAsan的内存开销更低，检测到的内存错误范围更大。- true：当前工程开启HWAsan检测。- false：当前工程不开启HWAsan检测。布尔值该标签可缺省，缺省值为false。ubsanEnabled标识应用程序是否开启UBsan检测。UBsan(Undefined Behavior Sanitizer)是一个用于运行时检测程序中未定义行为的工具，旨在帮助开发人员发现代码中潜在的错误和漏洞。- true：当前工程开启UBsan检测。- false：当前工程不开启UBsan检测。布尔值该标签可缺省，缺省值为false。cloudFileSyncEnabled标识当前应用是否启用端云文件同步能力。- true：当前应用启用端云文件同步能力。- false：当前应用不启用端云文件同步能力。布尔值该标签可缺省，缺省值为false。configuration标识当前应用字体大小跟随系统配置的能力。该标签是一个profile文件资源，用于指定描述应用字体大小跟随系统变更的配置文件。字符串该标签可缺省，缺省时configuration使用不跟随系统默认设定。

标识应用的Bundle名称，用于标识应用的唯一性。命名规则如下 ：

- 必须为以点号（.）分隔的字符串，且至少包含三段，每段中仅允许使用英文字母、数字、下划线（_）。

- 首段以英文字母开头，非首段以数字或英文字母开头，每一段以数字或者英文字母结尾。

- 不允许多个点号（.）连续出现。

- 字符串最小长度为7字节，最大长度128字节。

- 推荐采用反域名形式命名（如“com.example.demo”，建议第一级为域名后缀com，第二级为厂商/个人名，第三级为应用名，也可以多级）。

对于随系统源码编译的应用，建议命名为“com.ohos.demo”形式，其中的ohos标识系统应用。

标识应用的Bundle类型，用于区分应用或者元服务。支持的取值如下：

- app：当前Bundle为应用。

- atomicService：当前Bundle为元服务。

- shared：当前Bundle为共享库应用，预留字段。

- appService：当前Bundle为系统级共享库应用，仅供系统应用使用。

标识应用是否可调试。

- true：可调试，一般用于开发阶段。

- false：不可调试，一般用于发布阶段。

标识应用的版本号，取值为小于2^31次方的正整数。此数字仅用于确定某个版本是否比另一个版本更新，数值越大表示版本越高。

开发者可以将该值设置为任何正整数，但是必须确保应用的新版本都使用比旧版本更大的值。

标识向用户展示的应用版本号。

取值为长度不超过127字节的字符串，仅由数字和点构成，推荐采用“A.B.C.D”四段式的形式。四段式推荐的含义如下所示。

第一段：主版本号/Major，范围0~99，重大修改的版本，如实现新的大功能或重大变化。

第二段：次版本号/Minor，范围0~99，表示实现较突出的特点，如新功能添加或大问题修复。

第三段：特性版本号/Feature，范围0~99，标识规划的新版本特性。

第四段：修订版本号/Patch，范围0~999，表示维护版本，如修复bug。

标识应用运行需要的API目标版本的类型，采用字符串类型表示。取值为“CanaryN”、“BetaN”或者“Release”，其中，N代表大于零的整数。

- Canary：受限发布的版本。

- Beta：公开发布的Beta版本。

- Release：公开发布的正式版本。

标识当前工程是否支持多个工程的联合开发。

- true：当前工程支持多个工程的联合开发。多工程开发可参考多工程构建。

- false：当前工程不支持多个工程的联合开发。

标识应用程序是否开启asan检测，用于辅助定位buffer越界造成的crash问题。

- true：当前工程开启asan检测。

- false：当前工程不开启asan检测。

标识对tablet设备做的特殊配置，可以配置的属性字段有上文提到的：minAPIVersion。

如果使用该属性对tablet设备做了特殊配置，则应用在tablet设备中会采用此处配置的属性值，并忽略在app.json5公共区域配置的属性值。

标识对tv设备做的特殊配置，可以配置的属性字段有上文提到的：minAPIVersion。

如果使用该属性对tv设备做了特殊配置，则应用在tv设备中会采用此处配置的属性值，并忽略在app.json5公共区域配置的属性值。

标识对wearable设备做的特殊配置，可以配置的属性字段有上文提到的：minAPIVersion。

如果使用该属性对wearable设备做了特殊配置，则应用在wearable设备中会采用此处配置的属性值，并忽略在app.json5公共区域配置的属性值。

标识对car设备做的特殊配置，可以配置的属性字段有上文提到的：minAPIVersion。

如果使用该属性对car设备做了特殊配置，则应用在car设备中会采用此处配置的属性值，并忽略在app.json5公共区域配置的属性值。

标识对default设备做的特殊配置，可以配置的属性字段有上文提到的：minAPIVersion。

如果使用该属性对default设备做了特殊配置，则应用在default设备中会采用此处配置的属性值，并忽略在app.json5公共区域配置的属性值。

标识当前应用的所有HAP和HSP是否由打包工具生成哈希值。

该字段配置为true时，该应用下的所有HAP和HSP都会由打包工具生成对应的哈希值。系统OTA升级时，若应用的versionCode保持不变，可根据哈希值判断应用是否需要升级。

说明：

该字段仅对预置应用生效。

标识应用程序是否开启GWP-asan堆内存检测工具，用于对内存越界、内存释放后使用等内存破坏问题进行分析。

- true：当前工程开启GWP-asan检测。

- false：当前工程不开启GWP-asan检测。

标识应用程序是否开启HWAsan检测。HWAsan(HardWare-assisted AddressSanitizer)是利用Top-Byte-Ignore特性实现的增强版Asan，与Asan相比HWAsan的内存开销更低，检测到的内存错误范围更大。

- true：当前工程开启HWAsan检测。

- false：当前工程不开启HWAsan检测。

标识应用程序是否开启UBsan检测。

UBsan(Undefined Behavior Sanitizer)是一个用于运行时检测程序中未定义行为的工具，旨在帮助开发人员发现代码中潜在的错误和漏洞。

- true：当前工程开启UBsan检测。

- false：当前工程不开启UBsan检测。

标识当前应用是否启用端云文件同步能力。

- true：当前应用启用端云文件同步能力。

- false：当前应用不启用端云文件同步能力。

标识当前应用字体大小跟随系统配置的能力。

该标签是一个profile文件资源，用于指定描述应用字体大小跟随系统变更的配置文件。

icon标签

此标签标识应用的图标和对分层图标配置文件的索引。

分层图标的配置方式如下：

将图标的前景资源和背景资源放在AppScope/resources/base/media目录下，或使用目录下默认存放的前景资源和背景资源。

上述media目录下存在一个分层图标配置文件（layered_image.json），在文件中引用前景资源和背景资源，详见图标资源规范。

分层图标配置文件示例：

``` { "layered-image"： { "background":"$media:background", //背景资源 "foreground":"$media:foreground" //前景资源 } } ```

icon标签示例：

``` { "app":{ "icon":"$media:layered_image" } } ```

appEnvironments标签

此标签标识应用配置的环境变量。应用运行时有时会依赖一些三方库，这些三方库会使用到一些自定义的环境变量，为了不修改三方库的实现逻辑，可以在工程的配置文件中设置自定义的环境变量，以供运行时期使用。

表2appEnvironments标签说明

属性名称含义数据类型是否可缺省name标识环境变量的变量名称。取值为长度不超过4096字节的字符串。字符串该标签可缺省，缺省值为空。value标识环境变量的值。取值为长度不超过4096字节的字符串。字符串该标签可缺省，缺省值为空。

appEnvironments标签示例：

``` { "app": { "appEnvironments": [ { "name":"name1", "value": "value1" } ] } } ```

multiAppMode标签

应用多开模式。

表3multiAppMode标签说明

属性名称含义数据类型是否可缺省multiAppModeType标识应用多开模式类型，支持的取值如下：- multiInstance：多实例模式。该字段仅支持2in1设备，常驻进程不支持该字段。- appClone：应用分身模式。字符串该标签不可缺省。maxCount标识最大允许的应用多开个数，支持的取值如下：- multiInstance模式：取值范围1~10。- appClone模式：取值范围1~5。数值该标签不可缺省。

标识应用多开模式类型，支持的取值如下：

- multiInstance：多实例模式。该字段仅支持2in1设备，常驻进程不支持该字段。

- appClone：应用分身模式。

标识最大允许的应用多开个数，支持的取值如下：

- multiInstance模式：取值范围1~10。

- appClone模式：取值范围1~5。

multiAppMode标签示例：

``` { "app": { "multiAppMode": { "multiAppModeType": "appClone", "maxCount": 5 } } } ```

configuration标签

configuration标签示例：

``` { "app": { "configuration": "$profile:configuration" } } ```

在开发视图的AppScope/resources/base/profile下面定义配置文件configuration.json，其中文件名"configuration"可自定义，需要和configuration标签指定的信息对应。配置文件中列举了当前应用字体大小跟随系统变化的属性。

表4configuration标签说明

属性名称含义数据类型是否可缺省fontSizeScale应用字体大小是否跟随系统，支持的取值如下：- followSystem：跟随系统。- nonFollowSystem：不跟随系统。字符串该标签可缺省，缺省值为nonFollowSystem。fontSizeMaxScale应用字体大小选择跟随系统后，配置的最大比例，支持的取值：1、1.15、1.3、1.45、1.75、2、3.2。fontSizeScale为nonFollowSystem时，该项不生效。字符串该标签可缺省，缺省值为3.2。

应用字体大小是否跟随系统，支持的取值如下：

- followSystem：跟随系统。

- nonFollowSystem：不跟随系统。

应用字体大小选择跟随系统后，配置的最大比例，支持的取值：1、1.15、1.3、1.45、1.75、2、3.2。

fontSizeScale为nonFollowSystem时，该项不生效。

``` { "configuration": { "fontSizeScale": "followSystem", "fontSizeMaxScale": "3.2" } } ```


==================================================
文件: markdown_content_20250423_210417.txt
==================================================

URL: https://developer.huawei.com/consumer/cn/doc/harmonyos-guides/app-configuration-file
爬取时间: 2025-04-23 21:04:17
来源: Huawei Developer


==================================================

URL: https://developer.huawei.com/consumer/cn/doc/harmonyos-guides/app-configuration-file
爬取时间: 2025-04-23 21:04:17
来源: Huawei Developer

配置文件示例

先通过一个示例，整体认识一下app.json5配置文件。

收起深色代码主题复制{"app":{"bundleName":"com.application.myapplication","vendor":"example","versionCode":1000000,"versionName":"1.0.0","icon":"$media:layered_image","label":"$string:app_name","description":"$string:description_application","minAPIVersion":9,"targetAPIVersion":9,"apiReleaseType":"Release","debug":false,"car":{"minAPIVersion":8},"targetBundleName":"com.application.test","targetPriority":50,"appEnvironments":[{"name":"name1","value":"value1"}],"maxChildProcess":5,"multiAppMode":{"multiAppModeType":"multiInstance","maxCount":5},"hwasanEnabled":false,"ubsanEnabled":false,"cloudFileSyncEnabled":false,"configuration":"$profile:configuration"},}

收起深色代码主题复制

收起

深色代码主题复制

深色代码主题

复制

``` {"app":{"bundleName":"com.application.myapplication","vendor":"example","versionCode":1000000,"versionName":"1.0.0","icon":"$media:layered_image","label":"$string:app_name","description":"$string:description_application","minAPIVersion":9,"targetAPIVersion":9,"apiReleaseType":"Release","debug":false,"car":{"minAPIVersion":8},"targetBundleName":"com.application.test","targetPriority":50,"appEnvironments":[{"name":"name1","value":"value1"}],"maxChildProcess":5,"multiAppMode":{"multiAppModeType":"multiInstance","maxCount":5},"hwasanEnabled":false,"ubsanEnabled":false,"cloudFileSyncEnabled":false,"configuration":"$profile:configuration"},} ```

{

"app":{

"app"

:

"bundleName":"com.application.myapplication",

"bundleName"

"com.application.myapplication"

,

"vendor":"example",

"vendor"

"example"

"versionCode":1000000,

"versionCode"

1000000

"versionName":"1.0.0",

"versionName"

"1.0.0"

"icon":"$media:layered_image",

"icon"

"$media:layered_image"

"label":"$string:app_name",

"label"

"$string:app_name"

"description":"$string:description_application",

"description"

"$string:description_application"

"minAPIVersion":9,

"minAPIVersion"

9

"targetAPIVersion":9,

"targetAPIVersion"

"apiReleaseType":"Release",

"apiReleaseType"

"Release"

"debug":false,

"debug"

false

"car":{

"car"

"minAPIVersion":8

8

},

}

"targetBundleName":"com.application.test",

"targetBundleName"

"com.application.test"

"targetPriority":50,

"targetPriority"

50

"appEnvironments":[

"appEnvironments"

[

"name":"name1",

"name"

"name1"

"value":"value1"

"value"

"value1"

],

]

"maxChildProcess":5,

"maxChildProcess"

5

"multiAppMode":{

"multiAppMode"

"multiAppModeType":"multiInstance",

"multiAppModeType"

"multiInstance"

"maxCount":5

"maxCount"

"hwasanEnabled":false,

"hwasanEnabled"

"ubsanEnabled":false,

"ubsanEnabled"

"cloudFileSyncEnabled":false,

"cloudFileSyncEnabled"

"configuration":"$profile:configuration"

"configuration"

"$profile:configuration"

配置文件标签

app.json5配置文件包含以下标签。

表1app.json5配置文件标签说明

属性名称含义数据类型是否可缺省bundleName标识应用的Bundle名称，用于标识应用的唯一性。命名规则如下 ：- 必须为以点号（.）分隔的字符串，且至少包含三段，每段中仅允许使用英文字母、数字、下划线（_）。- 首段以英文字母开头，非首段以数字或英文字母开头，每一段以数字或者英文字母结尾。- 不允许多个点号（.）连续出现。- 字符串最小长度为7字节，最大长度128字节。- 推荐采用反域名形式命名（如“com.example.demo”，建议第一级为域名后缀com，第二级为厂商/个人名，第三级为应用名，也可以多级）。对于随系统源码编译的应用，建议命名为“com.ohos.demo”形式，其中的ohos标识系统应用。字符串该标签不可缺省。bundleType标识应用的Bundle类型，用于区分应用或者元服务。支持的取值如下：- app：当前Bundle为应用。- atomicService：当前Bundle为元服务。- shared：当前Bundle为共享库应用，预留字段。- appService：当前Bundle为系统级共享库应用，仅供系统应用使用。字符串该标签可缺省，缺省值为app。debug标识应用是否可调试。- true：可调试，一般用于开发阶段。- false：不可调试，一般用于发布阶段。布尔值由DevEco Studio编译构建时生成。该标签可缺省，缺省值为false。icon标识应用的图标，取值为图标资源文件的索引。字符串该标签不可缺省。label标识应用的名称，取值为字符串资源的索引，字符串长度不超过63字节。字符串该标签不可缺省。description标识应用的描述信息，取值为长度不超过255字节的字符串，内容为描述信息的字符串资源索引。该字段可用于应用信息展示，如在应用的关于页面，取该字段展示应用描述信息。字符串该标签可缺省，缺省值为空。vendor标识对应用开发厂商的描述，取值为长度不超过255字节的字符串。该字段可用于展示开发厂商信息，如在应用的关于页面，取该字段展示开发厂商信息。字符串该标签可缺省，缺省值为空。versionCode标识应用的版本号，取值为小于2^31次方的正整数。此数字仅用于确定某个版本是否比另一个版本更新，数值越大表示版本越高。开发者可以将该值设置为任何正整数，但是必须确保应用的新版本都使用比旧版本更大的值。数值该标签不可缺省。versionName标识向用户展示的应用版本号。取值为长度不超过127字节的字符串，仅由数字和点构成，推荐采用“A.B.C.D”四段式的形式。四段式推荐的含义如下所示。第一段：主版本号/Major，范围0~99，重大修改的版本，如实现新的大功能或重大变化。第二段：次版本号/Minor，范围0~99，表示实现较突出的特点，如新功能添加或大问题修复。第三段：特性版本号/Feature，范围0~99，标识规划的新版本特性。第四段：修订版本号/Patch，范围0~999，表示维护版本，如修复bug。字符串该标签不可缺省。minCompatibleVersionCode标识应用能够兼容的最低历史版本号，用于应用多设备之间协同、数据迁移、跨设备兼容性判断，该字段为预留字段，暂未使用。取值范围为0~2147483647。数值该标签可缺省，缺省值等于versionCode标签值。minAPIVersion标识应用运行需要的SDK的API最小版本。取值范围为0~2147483647。数值应用编译构建时由build-profile.json5中的compatibleSdkVersion自动生成。targetAPIVersion标识应用运行需要的API目标版本。取值范围为0~2147483647。数值应用编译构建时由build-profile.json5中的compileSdkVersion自动生成。apiReleaseType标识应用运行需要的API目标版本的类型，采用字符串类型表示。取值为“CanaryN”、“BetaN”或者“Release”，其中，N代表大于零的整数。- Canary：受限发布的版本。- Beta：公开发布的Beta版本。- Release：公开发布的正式版本。字符串应用编译构建时根据当前使用的SDK的Stage自动生成。即便手动配置了取值，编译构建时也会被覆盖。accessible标识应用是否能访问应用的安装目录，仅针对Stage模型的系统应用和预置应用生效。布尔值该标签可缺省，缺省值为false。multiProjects标识当前工程是否支持多个工程的联合开发。- true：当前工程支持多个工程的联合开发。多工程开发可参考多工程构建。- false：当前工程不支持多个工程的联合开发。布尔值该标签可缺省，缺省值为false。asanEnabled标识应用程序是否开启asan检测，用于辅助定位buffer越界造成的crash问题。- true：当前工程开启asan检测。- false：当前工程不开启asan检测。布尔值该标签可缺省，缺省值为false。tablet标识对tablet设备做的特殊配置，可以配置的属性字段有上文提到的：minAPIVersion。如果使用该属性对tablet设备做了特殊配置，则应用在tablet设备中会采用此处配置的属性值，并忽略在app.json5公共区域配置的属性值。对象该标签可缺省，缺省时tablet设备使用app.json5公共区域配置的属性值。tv标识对tv设备做的特殊配置，可以配置的属性字段有上文提到的：minAPIVersion。如果使用该属性对tv设备做了特殊配置，则应用在tv设备中会采用此处配置的属性值，并忽略在app.json5公共区域配置的属性值。对象该标签可缺省，缺省时tv设备使用app.json5公共区域配置的属性值。wearable标识对wearable设备做的特殊配置，可以配置的属性字段有上文提到的：minAPIVersion。如果使用该属性对wearable设备做了特殊配置，则应用在wearable设备中会采用此处配置的属性值，并忽略在app.json5公共区域配置的属性值。对象该标签可缺省，缺省时wearable设备使用app.json5公共区域配置的属性值。car标识对car设备做的特殊配置，可以配置的属性字段有上文提到的：minAPIVersion。如果使用该属性对car设备做了特殊配置，则应用在car设备中会采用此处配置的属性值，并忽略在app.json5公共区域配置的属性值。对象该标签可缺省，缺省时car设备使用app.json5公共区域配置的属性值。default标识对default设备做的特殊配置，可以配置的属性字段有上文提到的：minAPIVersion。如果使用该属性对default设备做了特殊配置，则应用在default设备中会采用此处配置的属性值，并忽略在app.json5公共区域配置的属性值。对象该标签可缺省，缺省时default设备使用app.json5公共区域配置的属性值。targetBundleName标识当前包所指定的目标应用, 标签值的取值规则和范围与bundleName标签一致。配置该字段的应用为具有overlay特征的应用。字符串该标签可缺省，缺省值为空。targetPriority标识当前应用的优先级，取值范围为1~100。配置targetBundleName字段之后，才支持配置该字段。数值该标签可缺省, 缺省值为1。generateBuildHash标识当前应用的所有HAP和HSP是否由打包工具生成哈希值。该字段配置为true时，该应用下的所有HAP和HSP都会由打包工具生成对应的哈希值。系统OTA升级时，若应用的versionCode保持不变，可根据哈希值判断应用是否需要升级。说明：该字段仅对预置应用生效。布尔值该标签可缺省, 缺省值为false。GWPAsanEnabled标识应用程序是否开启GWP-asan堆内存检测工具，用于对内存越界、内存释放后使用等内存破坏问题进行分析。- true：当前工程开启GWP-asan检测。- false：当前工程不开启GWP-asan检测。布尔值该标签可缺省, 缺省值为false。appEnvironments标识当前模块配置的应用环境变量。对象数组该标签可缺省，缺省值为空。maxChildProcess标识当前应用自身可创建的子进程的最大个数，取值范围为0到512，0表示不限制，当应用有多个模块时，以entry模块的配置为准。数值该标签可缺省，缺省时使用系统配置的默认值。multiAppMode标识当前应用配置的多开模式。仅bundleType为app的应用的entry或feature模块配置有效，存在多个模块时，以entry模块的配置为准。对象该标签可缺省，缺省值为空。hwasanEnabled标识应用程序是否开启HWAsan检测。HWAsan(HardWare-assisted AddressSanitizer)是利用Top-Byte-Ignore特性实现的增强版Asan，与Asan相比HWAsan的内存开销更低，检测到的内存错误范围更大。- true：当前工程开启HWAsan检测。- false：当前工程不开启HWAsan检测。布尔值该标签可缺省，缺省值为false。ubsanEnabled标识应用程序是否开启UBsan检测。UBsan(Undefined Behavior Sanitizer)是一个用于运行时检测程序中未定义行为的工具，旨在帮助开发人员发现代码中潜在的错误和漏洞。- true：当前工程开启UBsan检测。- false：当前工程不开启UBsan检测。布尔值该标签可缺省，缺省值为false。cloudFileSyncEnabled标识当前应用是否启用端云文件同步能力。- true：当前应用启用端云文件同步能力。- false：当前应用不启用端云文件同步能力。布尔值该标签可缺省，缺省值为false。configuration标识当前应用字体大小跟随系统配置的能力。该标签是一个profile文件资源，用于指定描述应用字体大小跟随系统变更的配置文件。字符串该标签可缺省，缺省时configuration使用不跟随系统默认设定。

标识应用的Bundle名称，用于标识应用的唯一性。命名规则如下 ：

- 必须为以点号（.）分隔的字符串，且至少包含三段，每段中仅允许使用英文字母、数字、下划线（_）。

- 首段以英文字母开头，非首段以数字或英文字母开头，每一段以数字或者英文字母结尾。

- 不允许多个点号（.）连续出现。

- 字符串最小长度为7字节，最大长度128字节。

- 推荐采用反域名形式命名（如“com.example.demo”，建议第一级为域名后缀com，第二级为厂商/个人名，第三级为应用名，也可以多级）。

对于随系统源码编译的应用，建议命名为“com.ohos.demo”形式，其中的ohos标识系统应用。

标识应用的Bundle类型，用于区分应用或者元服务。支持的取值如下：

- app：当前Bundle为应用。

- atomicService：当前Bundle为元服务。

- shared：当前Bundle为共享库应用，预留字段。

- appService：当前Bundle为系统级共享库应用，仅供系统应用使用。

标识应用是否可调试。

- true：可调试，一般用于开发阶段。

- false：不可调试，一般用于发布阶段。

标识应用的版本号，取值为小于2^31次方的正整数。此数字仅用于确定某个版本是否比另一个版本更新，数值越大表示版本越高。

开发者可以将该值设置为任何正整数，但是必须确保应用的新版本都使用比旧版本更大的值。

标识向用户展示的应用版本号。

取值为长度不超过127字节的字符串，仅由数字和点构成，推荐采用“A.B.C.D”四段式的形式。四段式推荐的含义如下所示。

第一段：主版本号/Major，范围0~99，重大修改的版本，如实现新的大功能或重大变化。

第二段：次版本号/Minor，范围0~99，表示实现较突出的特点，如新功能添加或大问题修复。

第三段：特性版本号/Feature，范围0~99，标识规划的新版本特性。

第四段：修订版本号/Patch，范围0~999，表示维护版本，如修复bug。

标识应用运行需要的API目标版本的类型，采用字符串类型表示。取值为“CanaryN”、“BetaN”或者“Release”，其中，N代表大于零的整数。

- Canary：受限发布的版本。

- Beta：公开发布的Beta版本。

- Release：公开发布的正式版本。

标识当前工程是否支持多个工程的联合开发。

- true：当前工程支持多个工程的联合开发。多工程开发可参考多工程构建。

- false：当前工程不支持多个工程的联合开发。

标识应用程序是否开启asan检测，用于辅助定位buffer越界造成的crash问题。

- true：当前工程开启asan检测。

- false：当前工程不开启asan检测。

标识对tablet设备做的特殊配置，可以配置的属性字段有上文提到的：minAPIVersion。

如果使用该属性对tablet设备做了特殊配置，则应用在tablet设备中会采用此处配置的属性值，并忽略在app.json5公共区域配置的属性值。

标识对tv设备做的特殊配置，可以配置的属性字段有上文提到的：minAPIVersion。

如果使用该属性对tv设备做了特殊配置，则应用在tv设备中会采用此处配置的属性值，并忽略在app.json5公共区域配置的属性值。

标识对wearable设备做的特殊配置，可以配置的属性字段有上文提到的：minAPIVersion。

如果使用该属性对wearable设备做了特殊配置，则应用在wearable设备中会采用此处配置的属性值，并忽略在app.json5公共区域配置的属性值。

标识对car设备做的特殊配置，可以配置的属性字段有上文提到的：minAPIVersion。

如果使用该属性对car设备做了特殊配置，则应用在car设备中会采用此处配置的属性值，并忽略在app.json5公共区域配置的属性值。

标识对default设备做的特殊配置，可以配置的属性字段有上文提到的：minAPIVersion。

如果使用该属性对default设备做了特殊配置，则应用在default设备中会采用此处配置的属性值，并忽略在app.json5公共区域配置的属性值。

标识当前应用的所有HAP和HSP是否由打包工具生成哈希值。

该字段配置为true时，该应用下的所有HAP和HSP都会由打包工具生成对应的哈希值。系统OTA升级时，若应用的versionCode保持不变，可根据哈希值判断应用是否需要升级。

说明：

该字段仅对预置应用生效。

标识应用程序是否开启GWP-asan堆内存检测工具，用于对内存越界、内存释放后使用等内存破坏问题进行分析。

- true：当前工程开启GWP-asan检测。

- false：当前工程不开启GWP-asan检测。

标识应用程序是否开启HWAsan检测。HWAsan(HardWare-assisted AddressSanitizer)是利用Top-Byte-Ignore特性实现的增强版Asan，与Asan相比HWAsan的内存开销更低，检测到的内存错误范围更大。

- true：当前工程开启HWAsan检测。

- false：当前工程不开启HWAsan检测。

标识应用程序是否开启UBsan检测。

UBsan(Undefined Behavior Sanitizer)是一个用于运行时检测程序中未定义行为的工具，旨在帮助开发人员发现代码中潜在的错误和漏洞。

- true：当前工程开启UBsan检测。

- false：当前工程不开启UBsan检测。

标识当前应用是否启用端云文件同步能力。

- true：当前应用启用端云文件同步能力。

- false：当前应用不启用端云文件同步能力。

标识当前应用字体大小跟随系统配置的能力。

该标签是一个profile文件资源，用于指定描述应用字体大小跟随系统变更的配置文件。

icon标签

此标签标识应用的图标和对分层图标配置文件的索引。

分层图标的配置方式如下：

将图标的前景资源和背景资源放在AppScope/resources/base/media目录下，或使用目录下默认存放的前景资源和背景资源。

上述media目录下存在一个分层图标配置文件（layered_image.json），在文件中引用前景资源和背景资源，详见图标资源规范。

分层图标配置文件示例：

收起深色代码主题复制{"layered-image"：{"background":"$media:background",//背景资源"foreground":"$media:foreground"//前景资源}}

``` {"layered-image"：{"background":"$media:background",//背景资源"foreground":"$media:foreground"//前景资源}} ```

"layered-image"：

"layered-image"

"background":"$media:background",//背景资源

"background"

"$media:background"

//背景资源

"foreground":"$media:foreground"//前景资源

"foreground"

"$media:foreground"

//前景资源

icon标签示例：

收起深色代码主题复制{"app":{"icon":"$media:layered_image"}}

``` {"app":{"icon":"$media:layered_image"}} ```

"icon":"$media:layered_image"

appEnvironments标签

此标签标识应用配置的环境变量。应用运行时有时会依赖一些三方库，这些三方库会使用到一些自定义的环境变量，为了不修改三方库的实现逻辑，可以在工程的配置文件中设置自定义的环境变量，以供运行时期使用。

表2appEnvironments标签说明

属性名称含义数据类型是否可缺省name标识环境变量的变量名称。取值为长度不超过4096字节的字符串。字符串该标签可缺省，缺省值为空。value标识环境变量的值。取值为长度不超过4096字节的字符串。字符串该标签可缺省，缺省值为空。

appEnvironments标签示例：

收起深色代码主题复制{"app":{"appEnvironments":[{"name":"name1","value":"value1"}]}}

``` {"app":{"appEnvironments":[{"name":"name1","value":"value1"}]}} ```

multiAppMode标签

应用多开模式。

表3multiAppMode标签说明

属性名称含义数据类型是否可缺省multiAppModeType标识应用多开模式类型，支持的取值如下：- multiInstance：多实例模式。该字段仅支持2in1设备，常驻进程不支持该字段。- appClone：应用分身模式。字符串该标签不可缺省。maxCount标识最大允许的应用多开个数，支持的取值如下：- multiInstance模式：取值范围1~10。- appClone模式：取值范围1~5。数值该标签不可缺省。

标识应用多开模式类型，支持的取值如下：

- multiInstance：多实例模式。该字段仅支持2in1设备，常驻进程不支持该字段。

- appClone：应用分身模式。

标识最大允许的应用多开个数，支持的取值如下：

- multiInstance模式：取值范围1~10。

- appClone模式：取值范围1~5。

multiAppMode标签示例：

收起深色代码主题复制{"app":{"multiAppMode":{"multiAppModeType":"appClone","maxCount":5}}}

``` {"app":{"multiAppMode":{"multiAppModeType":"appClone","maxCount":5}}} ```

"multiAppModeType":"appClone",

"appClone"

configuration标签

configuration标签示例：

收起深色代码主题复制{"app":{"configuration":"$profile:configuration"}}

``` {"app":{"configuration":"$profile:configuration"}} ```

在开发视图的AppScope/resources/base/profile下面定义配置文件configuration.json，其中文件名"configuration"可自定义，需要和configuration标签指定的信息对应。配置文件中列举了当前应用字体大小跟随系统变化的属性。

表4configuration标签说明

属性名称含义数据类型是否可缺省fontSizeScale应用字体大小是否跟随系统，支持的取值如下：- followSystem：跟随系统。- nonFollowSystem：不跟随系统。字符串该标签可缺省，缺省值为nonFollowSystem。fontSizeMaxScale应用字体大小选择跟随系统后，配置的最大比例，支持的取值：1、1.15、1.3、1.45、1.75、2、3.2。fontSizeScale为nonFollowSystem时，该项不生效。字符串该标签可缺省，缺省值为3.2。

应用字体大小是否跟随系统，支持的取值如下：

- followSystem：跟随系统。

- nonFollowSystem：不跟随系统。

应用字体大小选择跟随系统后，配置的最大比例，支持的取值：1、1.15、1.3、1.45、1.75、2、3.2。

fontSizeScale为nonFollowSystem时，该项不生效。

收起深色代码主题复制{"configuration":{"fontSizeScale":"followSystem","fontSizeMaxScale":"3.2"}}

``` {"configuration":{"fontSizeScale":"followSystem","fontSizeMaxScale":"3.2"}} ```

"configuration":{

"fontSizeScale":"followSystem",

"fontSizeScale"

"followSystem"

"fontSizeMaxScale":"3.2"

"fontSizeMaxScale"

"3.2"


==================================================
文件: markdown_content_20250423_210515.txt
==================================================

URL: https://developer.huawei.com/consumer/cn/doc/harmonyos-guides/module-configuration-file
爬取时间: 2025-04-23 21:05:15
来源: Huawei Developer


==================================================

URL: https://developer.huawei.com/consumer/cn/doc/harmonyos-guides/module-configuration-file
爬取时间: 2025-04-23 21:05:15
来源: Huawei Developer

配置文件示例

先通过一个示例，整体认识一下module.json5配置文件。

收起深色代码主题复制{"module":{"name":"entry","type":"entry","description":"$string:module_desc","mainElement":"EntryAbility","deviceTypes":["tv","tablet"],"deliveryWithInstall":true,"installationFree":false,"pages":"$profile:main_pages","virtualMachine":"ark","metadata":[{"name":"string","value":"string","resource":"$profile:distributionFilter_config"}],"abilities":[{"name":"EntryAbility","srcEntry":"./ets/entryability/EntryAbility.ts","description":"$string:EntryAbility_desc","icon":"$media:icon","label":"$string:EntryAbility_label","startWindowIcon":"$media:icon","startWindowBackground":"$color:start_window_background","exported":true,"skills":[{"entities":["entity.system.home"],"actions":["ohos.want.action.home"]}]}],"requestPermissions":[{"name":"ohos.abilitydemo.permission.PROVIDER","reason":"$string:reason","usedScene":{"abilities":["FormAbility"],"when":"inuse"}}]},"targetModuleName":"feature","targetPriority":50,"isolationMode":"nonisolationFirst"}

收起深色代码主题复制

收起

深色代码主题复制

深色代码主题

复制

``` {"module":{"name":"entry","type":"entry","description":"$string:module_desc","mainElement":"EntryAbility","deviceTypes":["tv","tablet"],"deliveryWithInstall":true,"installationFree":false,"pages":"$profile:main_pages","virtualMachine":"ark","metadata":[{"name":"string","value":"string","resource":"$profile:distributionFilter_config"}],"abilities":[{"name":"EntryAbility","srcEntry":"./ets/entryability/EntryAbility.ts","description":"$string:EntryAbility_desc","icon":"$media:icon","label":"$string:EntryAbility_label","startWindowIcon":"$media:icon","startWindowBackground":"$color:start_window_background","exported":true,"skills":[{"entities":["entity.system.home"],"actions":["ohos.want.action.home"]}]}],"requestPermissions":[{"name":"ohos.abilitydemo.permission.PROVIDER","reason":"$string:reason","usedScene":{"abilities":["FormAbility"],"when":"inuse"}}]},"targetModuleName":"feature","targetPriority":50,"isolationMode":"nonisolationFirst"} ```

{

"module":{

"module"

:

"name":"entry",

"name"

"entry"

,

"type":"entry",

"type"

"description":"$string:module_desc",

"description"

"$string:module_desc"

"mainElement":"EntryAbility",

"mainElement"

"EntryAbility"

"deviceTypes":[

"deviceTypes"

[

"tv",

"tv"

"tablet"

],

]

"deliveryWithInstall":true,

"deliveryWithInstall"

true

"installationFree":false,

"installationFree"

false

"pages":"$profile:main_pages",

"pages"

"$profile:main_pages"

"virtualMachine":"ark",

"virtualMachine"

"ark"

"metadata":[

"metadata"

"name":"string",

"string"

"value":"string",

"value"

"resource":"$profile:distributionFilter_config"

"resource"

"$profile:distributionFilter_config"

}

"abilities":[

"abilities"

"name":"EntryAbility",

"srcEntry":"./ets/entryability/EntryAbility.ts",

"srcEntry"

"./ets/entryability/EntryAbility.ts"

"description":"$string:EntryAbility_desc",

"$string:EntryAbility_desc"

"icon":"$media:icon",

"icon"

"$media:icon"

"label":"$string:EntryAbility_label",

"label"

"$string:EntryAbility_label"

"startWindowIcon":"$media:icon",

"startWindowIcon"

"startWindowBackground":"$color:start_window_background",

"startWindowBackground"

"$color:start_window_background"

"exported":true,

"exported"

"skills":[

"skills"

"entities":[

"entities"

"entity.system.home"

"actions":[

"actions"

"ohos.want.action.home"

"requestPermissions":[

"requestPermissions"

"name":"ohos.abilitydemo.permission.PROVIDER",

"ohos.abilitydemo.permission.PROVIDER"

"reason":"$string:reason",

"reason"

"$string:reason"

"usedScene":{

"usedScene"

"FormAbility"

"when":"inuse"

"when"

"inuse"

},

"targetModuleName":"feature",

"targetModuleName"

"feature"

"targetPriority":50,

"targetPriority"

50

"isolationMode":"nonisolationFirst"

"isolationMode"

"nonisolationFirst"

配置文件标签

module.json5配置文件包含以下标签。

表1module.json5配置文件标签说明

属性名称含义数据类型是否可缺省name标识当前Module的名称，确保该名称在整个应用中唯一。命名规则如下 ：- 由字母、数字和下划线组成，且必须以字母开头。- 最大长度31字节。应用升级时允许修改该名称，但需要应用适配Module相关数据目录的迁移，详见文件管理接口。字符串该标签不可缺省。type标识当前Module的类型。支持的取值如下：- entry：应用的主模块。- feature：应用的动态特性模块。- har：静态共享包模块。- shared：动态共享包模块。字符串该标签不可缺省。srcEntry标识当前Module所对应入口UIAbility或者ExtensionAbility的代码路径，需要和mainElement字段指向同一个UIAbility或者ExtensionAbility，取值为长度不超过127字节的字符串。字符串该标签可缺省，缺省值为空。description标识当前Module的描述信息，开发者可以通过该字段描述当前模块的功能与作用，取值为长度不超过255字节的字符串，可以采用字符串资源索引格式。字符串该标签可缺省，缺省值为空。mainElement标识当前Module的入口UIAbility名称或者ExtensionAbility名称，需要和srcEntry字段指向同一个UIAbility或者ExtensionAbility，取值为长度不超过255字节的字符串。字符串该标签可缺省，缺省值为空。deviceTypes标识当前Module可以运行在哪类设备上。说明：当存在多个模块时，各模块中的配置可以不一致，但必须包含所需的设备类型以确保正常运行。字符串数组该标签不可缺省。deliveryWithInstall标识当前Module是否在用户主动安装的时候安装，即该Module对应的HAP是否跟随应用一起安装。- true：主动安装时安装。- false：主动安装时不安装。布尔值该标签不可缺省。installationFree标识当前Module是否支持免安装特性。- true：表示支持免安装特性，且符合免安装约束。- false：表示不支持免安装特性。说明：当bundleType为元服务时，该字段需要配置为true。反之，该字段需要配置为false。布尔值该标签不可缺省。virtualMachine标识当前Module运行的目标虚拟机类型，供云端分发使用，如应用市场和分发中心。如果目标虚拟机类型为ArkTS引擎，则其值为“ark+版本号”。字符串该标签由IDE构建HAP的时候自动插入。pages标识当前Module的profile资源，用于列举每个页面信息，取值为长度不超过255字节的字符串。字符串在有UIAbility的场景下，该标签不可缺省。metadata标识当前Module的自定义元信息，可通过资源引用的方式配置distributionFilter、shortcuts等信息。只对当前Module、UIAbility、ExtensionAbility生效。对象数组该标签可缺省，缺省值为空。abilities标识当前Module中UIAbility的配置信息，只对当前UIAbility生效。对象数组该标签可缺省，缺省值为空。extensionAbilities标识当前Module中ExtensionAbility的配置信息，只对当前ExtensionAbility生效。对象数组该标签可缺省，缺省值为空。definePermissions标识系统资源hap定义的权限，不支持应用自定义权限。对象数组该标签可缺省，缺省值为空。requestPermissions标识当前应用运行时需向系统申请的权限集合。对象数组该标签可缺省，缺省值为空。testRunner标识用于测试当前Module的测试框架的配置。对象该标签可缺省，缺省值为空。atomicService标识当前应用是元服务时，有关元服务的相关配置。对象该标签可缺省，缺省值为空。dependencies标识当前模块运行时依赖的共享库列表。对象数组该标签可缺省，缺省值为空。targetModuleName标识当前包所指定的目标module，确保该名称在整个应用中唯一。取值为长度不超过31字节的字符串，不支持中文。配置该字段的Module具有overlay特性。仅在动态共享包（HSP）中适用。字符串该标签可缺省，缺省值为空。targetPriority标识当前Module的优先级，取值范围为1~100。配置targetModuleName字段之后，才需要配置该字段。仅在动态共享包（HSP）中适用。整型数值该标签可缺省，缺省值为1。proxyData标识当前Module提供的数据代理列表。对象数组该标签可缺省，缺省值为空。isolationMode标识当前Module的多进程配置项。支持的取值如下：- nonisolationFirst：优先在非独立进程中运行。- isolationFirst：优先在独立进程中运行。- isolationOnly：只在独立进程中运行。- nonisolationOnly：只在非独立进程中运行。说明：1.仅2in1和tablet设备支持将当前Module设置为独立进程。2.该字段仅对HAP生效。字符串该标签可缺省，缺省值为nonisolationFirst。generateBuildHash标识当前HAP/HSP是否由打包工具生成哈希值。当配置为true时，如果系统OTA升级时应用versionCode保持不变，可根据哈希值判断应用是否需要升级。该字段仅在app.json5文件中的generateBuildHash字段为false时使能。说明：该字段仅对预置应用生效。布尔值该标签可缺省，缺省值为false。compressNativeLibs标识libs库是否以压缩存储的方式打包到HAP。- true：libs库以压缩方式存储。- false：libs库以不压缩方式存储。布尔值该标签可缺省，缺省值为false。libIsolation用于区分同应用不同HAP下的.so文件，以防止.so冲突。- true：当前HAP的.so文件会储存在libs目录中以Module名命名的路径下。- false：当前HAP的.so文件会直接储存在libs目录中。布尔值该标签可缺省，缺省值为false。fileContextMenu标识当前HAP的右键菜单配置项。取值为长度不超过255字节的字符串。字符串该标签可缺省，缺省值为空。querySchemes标识允许当前应用进行跳转查询的URL schemes，只允许entry类型模块配置，最多50个，每个字符串取值不超过128字节。字符串数组该标签可缺省，缺省值为空。routerMap标识当前模块配置的路由表路径。取值为长度不超过255字节的字符串。字符串该标签可缺省，缺省值为空。appEnvironments标识当前模块配置的应用环境变量，只允许entry和feature模块配置。对象数组该标签可缺省，缺省值为空。appStartup标识当前Module启动框架配置路径，仅在Entry中生效。字符串该标签可缺省，缺省值为空。hnpPackages标识当前应用包含的Native软件包信息。只允许entry类型模块配置。对象数组该标签可缺省，缺省值为空。

标识当前Module的名称，确保该名称在整个应用中唯一。命名规则如下 ：

- 由字母、数字和下划线组成，且必须以字母开头。

- 最大长度31字节。

应用升级时允许修改该名称，但需要应用适配Module相关数据目录的迁移，详见文件管理接口。

标识当前Module的类型。支持的取值如下：

- entry：应用的主模块。

- feature：应用的动态特性模块。

- har：静态共享包模块。

- shared：动态共享包模块。

标识当前Module可以运行在哪类设备上。

说明：

当存在多个模块时，各模块中的配置可以不一致，但必须包含所需的设备类型以确保正常运行。

标识当前Module是否在用户主动安装的时候安装，即该Module对应的HAP是否跟随应用一起安装。

- true：主动安装时安装。

- false：主动安装时不安装。

标识当前Module是否支持免安装特性。

- true：表示支持免安装特性，且符合免安装约束。

- false：表示不支持免安装特性。

当bundleType为元服务时，该字段需要配置为true。反之，该字段需要配置为false。

标识当前Module的多进程配置项。支持的取值如下：

- nonisolationFirst：优先在非独立进程中运行。

- isolationFirst：优先在独立进程中运行。

- isolationOnly：只在独立进程中运行。

- nonisolationOnly：只在非独立进程中运行。

1.仅2in1和tablet设备支持将当前Module设置为独立进程。

2.该字段仅对HAP生效。

标识当前HAP/HSP是否由打包工具生成哈希值。当配置为true时，如果系统OTA升级时应用versionCode保持不变，可根据哈希值判断应用是否需要升级。

该字段仅在app.json5文件中的generateBuildHash字段为false时使能。

该字段仅对预置应用生效。

标识libs库是否以压缩存储的方式打包到HAP。

- true：libs库以压缩方式存储。

- false：libs库以不压缩方式存储。

用于区分同应用不同HAP下的.so文件，以防止.so冲突。

- true：当前HAP的.so文件会储存在libs目录中以Module名命名的路径下。

- false：当前HAP的.so文件会直接储存在libs目录中。

deviceTypes标签

表2deviceTypes标签说明

设备类型枚举值说明手机phone-平板tablet-PC/2in12in1即PC设备，主要交互方式以多窗口、多任务及键盘鼠标操作为主，充分发挥设备的生产力属性。在HarmonyOS文档中，所有“2in1”均代表“PC/2in1”。智慧屏tv-智能手表wearable系统能力较丰富的手表，具备电话功能。车机car-

deviceTypes示例：

收起深色代码主题复制{"module":{"name":"myHapName","type":"feature","deviceTypes":["tablet"]}}

``` {"module":{"name":"myHapName","type":"feature","deviceTypes":["tablet"]}} ```

"name":"myHapName",

"myHapName"

"type":"feature",

pages标签

该标签是一个profile文件资源，用于指定描述页面信息的配置文件。

收起深色代码主题复制{"module":{// ..."pages":"$profile:main_pages",// 通过profile下的资源文件配置}}

``` {"module":{// ..."pages":"$profile:main_pages",// 通过profile下的资源文件配置}} ```

// ...

"pages":"$profile:main_pages",// 通过profile下的资源文件配置

// 通过profile下的资源文件配置

在开发视图的resources/base/profile下面定义配置文件main_pages.json，其中文件名"main_pages"可自定义，需要和pages标签指定的信息对应。配置文件中列举了当前应用组件中的页面信息，包含页面的路由信息和显示窗口相关的配置。

表3pages标签说明

属性名称含义数据类型是否可缺省src标识当前Module中所有页面的路由信息，包括页面路径和页面名称。其中，页面路径是以当前Module的src/main/ets为基准。该标签取值为一个字符串数组，其中每个元素表示一个页面。字符串数组该标签不可缺省。window标识用于定义与显示窗口相关的配置。对象该标签可缺省，缺省值为空。

表4window标签说明

属性名称含义数据类型是否可缺省designWidth标识页面设计基准宽度。以此为基准，根据实际设备宽度来缩放元素大小。数值可缺省，缺省值为720px。autoDesignWidth标识页面设计基准宽度是否自动计算。当配置为true时，designWidth将会被忽略，设计基准宽度由设备宽度与屏幕密度计算得出。布尔值可缺省，缺省值为false。

收起深色代码主题复制{"src":["pages/index/mainPage","pages/second/payment","pages/third/shopping_cart","pages/four/owner"],"window":{"designWidth":720,"autoDesignWidth":false}}

``` {"src":["pages/index/mainPage","pages/second/payment","pages/third/shopping_cart","pages/four/owner"],"window":{"designWidth":720,"autoDesignWidth":false}} ```

"src":[

"src"

"pages/index/mainPage",

"pages/index/mainPage"

"pages/second/payment",

"pages/second/payment"

"pages/third/shopping_cart",

"pages/third/shopping_cart"

"pages/four/owner"

"window":{

"window"

"designWidth":720,

"designWidth"

720

"autoDesignWidth":false

"autoDesignWidth"

metadata标签

该标签标识HAP的自定义元信息，标签值为数组类型，包含name、value、resource三个子标签。

表5metadata标签说明

属性名称含义数据类型是否可缺省name标识数据项的名称，取值为长度不超过255字节的字符串。字符串该标签可缺省，缺省值为空。value标识数据项的值，取值为长度不超过255字节的字符串。字符串该标签可缺省，缺省值为空。resource标识定义用户自定义数据格式，取值为长度不超过255字节的字符串，内容为标识该数据的资源索引。字符串该标签可缺省，缺省值为空。

metadata标签可配置主窗的默认大小和位置（单位为vp），name为ohos.ability.window.height表示主窗默认高度，name为ohos.ability.window.width表示主窗默认宽度，name为ohos.ability.window.left表示主窗默认左边的位置，其配置格式为(对齐方式)(+|-偏移量)，对齐方式包括center、left和right，默认值为left，偏移量为0时可以省略，name为ohos.ability.window.top表示主窗顶部的位置，对齐方式包括center、top和bottom，默认值为top，两者同时省略按照系统默认层叠规格。

metadata标签可配置使能移除启动页功能，name为enable.remove.starting.window，value可配置为true/false，未配置则默认为false。

resource属性值使用“$profile:文件名”的方式指定文件所在位置，$profile表示资源的路径为工程中的/resources/base/profile目录下。例如$profile:shortcuts_config指定了/resources/base/profile/shortcuts_config.json配置文件。

收起深色代码主题复制{"module":{"metadata":[{"name":"module_metadata","value":"a test demo for module metadata","resource":"$profile:shortcuts_config"}],"abilities":[{"metadata":[{"name":"ability_metadata","value":"a test demo for ability","resource":"$profile:config_file"},{"name":"ability_metadata_2","value":"a string test","resource":"$profile:config_file"},{"name":"ohos.ability.window.height","value":"987"},{"name":"ohos.ability.window.width","value":"1300"},{"name":"ohos.ability.window.left","value":"right-50"},{"name":"ohos.ability.window.top","value":"center+50"},{"name":"enable.remove.starting.window","value":"true"}],}],"extensionAbilities":[{"metadata":[{"name":"extensionAbility_metadata","value":"a test for extensionAbility","resource":"$profile:config_file"},{"name":"extensionAbility_metadata_2","value":"a string test","resource":"$profile:config_file"}],}]}}

``` {"module":{"metadata":[{"name":"module_metadata","value":"a test demo for module metadata","resource":"$profile:shortcuts_config"}],"abilities":[{"metadata":[{"name":"ability_metadata","value":"a test demo for ability","resource":"$profile:config_file"},{"name":"ability_metadata_2","value":"a string test","resource":"$profile:config_file"},{"name":"ohos.ability.window.height","value":"987"},{"name":"ohos.ability.window.width","value":"1300"},{"name":"ohos.ability.window.left","value":"right-50"},{"name":"ohos.ability.window.top","value":"center+50"},{"name":"enable.remove.starting.window","value":"true"}],}],"extensionAbilities":[{"metadata":[{"name":"extensionAbility_metadata","value":"a test for extensionAbility","resource":"$profile:config_file"},{"name":"extensionAbility_metadata_2","value":"a string test","resource":"$profile:config_file"}],}]}} ```

"metadata":[{

"name":"module_metadata",

"module_metadata"

"value":"a test demo for module metadata",

"a test demo for module metadata"

"resource":"$profile:shortcuts_config"

"$profile:shortcuts_config"

}],

"abilities":[{

"name":"ability_metadata",

"ability_metadata"

"value":"a test demo for ability",

"a test demo for ability"

"resource":"$profile:config_file"

"$profile:config_file"

"name":"ability_metadata_2",

"ability_metadata_2"

"value":"a string test",

"a string test"

"name":"ohos.ability.window.height",

"ohos.ability.window.height"

"value":"987"

"987"

"name":"ohos.ability.window.width",

"ohos.ability.window.width"

"value":"1300"

"1300"

"name":"ohos.ability.window.left",

"ohos.ability.window.left"

"value":"right-50"

"right-50"

"name":"ohos.ability.window.top",

"ohos.ability.window.top"

"value":"center+50"

"center+50"

"name":"enable.remove.starting.window",

"enable.remove.starting.window"

"value":"true"

"true"

"extensionAbilities":[{

"extensionAbilities"

"name":"extensionAbility_metadata",

"extensionAbility_metadata"

"value":"a test for extensionAbility",

"a test for extensionAbility"

"name":"extensionAbility_metadata_2",

"extensionAbility_metadata_2"

}]

abilities标签

abilities标签描述UIAbility组件的配置信息，标签值为数组类型，该标签下的配置只对当前UIAbility生效。

表6abilities标签说明

属性名称含义数据类型是否可缺省name标识当前UIAbility组件的名称，确保该名称在整个应用中唯一。取值为长度不超过127字节的字符串，不支持中文。字符串该标签不可缺省。srcEntry标识入口UIAbility的代码路径，取值为长度不超过127字节的字符串。字符串该标签不可缺省。launchType标识当前UIAbility组件的启动模式，支持的取值如下：- multiton：多实例模式，每次启动创建一个新实例。- singleton：单实例模式，仅第一次启动创建新实例。- specified：指定实例模式，运行时由开发者决定是否创建新实例。- standard：multiton的曾用名，效果与多实例模式一致。字符串该标签可缺省，该标签缺省为“singleton”。description标识当前UIAbility组件的描述信息，开发者可以通过该字段描述当前组件的功能与作用，取值为长度不超过255字节的字符串。要求采用描述信息的资源索引，以支持多语言。字符串该标签可缺省，缺省值为空。icon标识当前UIAbility组件的图标，取值为图标资源文件的索引。字符串该标签可缺省，缺省值为空。label标识当前UIAbility组件对用户显示的名称，要求采用该名称的资源索引，以支持多语言。取值为长度不超过255字节的字符串。字符串该标签可缺省，缺省值为空。permissions标识当前UIAbility组件自定义的权限信息。当其他应用访问该UIAbility时，需要申请相应的权限信息。一个数组元素为一个权限名称。通常采用反向域名格式（不超过255字节），取值为系统预定义的权限。字符串数组该标签可缺省，缺省值为空。metadata标识当前UIAbility组件的元信息。对象数组该标签可缺省，缺省值为空。exported标识当前UIAbility组件是否可以被其他应用调用。- true：表示可以被其他应用调用。- false：表示不可以被其他应用调用，包括无法被aa工具命令拉起应用。布尔值该标签可缺省，缺省值为false。continuable标识当前UIAbility组件是否支持跨端迁移。- true：表示支持迁移。- false：表示不支持迁移。布尔值该标签可缺省，缺省值为false。skills标识当前UIAbility组件或ExtensionAbility组件能够接收的Want特征集，为数组格式。配置规则：- 对于Entry类型的HAP，应用可以配置多个具有入口能力的skills标签（即配置了action.system.home和entity.system.home）。- 对于Feature类型的HAP，只有应用可以配置具有入口能力的skills标签，服务不允许配置。对象数组该标签可缺省，缺省值为空。backgroundModes标识当前UIAbility组件的长时任务集合，指定用于满足特定类型的长时任务。长时任务类型有如下：- dataTransfer：通过网络/对端设备进行数据下载、备份、分享、传输等。- audioPlayback：音频播放。- audioRecording：录音。- location：定位、导航。- bluetoothInteraction：蓝牙扫描、连接、传输（穿戴）。- multiDeviceConnection：多设备互联。- taskKeeping：计算。字符串数组该标签可缺省，缺省值为空。startWindowIcon标识当前UIAbility组件启动页面图标资源文件的索引，取值为长度不超过255字节的字符串。字符串该标签不可缺省。startWindowBackground标识当前UIAbility组件启动页面背景颜色资源文件的索引，取值为长度不超过255字节的字符串。取值示例：$color:red。字符串该标签不可缺省。removeMissionAfterTerminate标识当前UIAbility组件销毁后，是否从任务列表中移除任务。- true表示销毁后移除任务。- false表示销毁后不移除任务。布尔值该标签可缺省，缺省值为false。orientation标识当前UIAbility组件启动时的方向，支持配置枚举和启动方向资源索引。枚举支持的取值如下：- unspecified：未指定方向，由系统自动判断显示方向。- landscape：横屏。- portrait：竖屏。- follow_recent：跟随背景窗口的旋转模式。- landscape_inverted：反向横屏。- portrait_inverted：反向竖屏。- auto_rotation：随传感器旋转。- auto_rotation_landscape：传感器横屏旋转，包括横屏和反向横屏。- auto_rotation_portrait：传感器竖屏旋转，包括竖屏和反向竖屏。- auto_rotation_restricted：传感器开关打开，方向可随传感器旋转。- auto_rotation_landscape_restricted：传感器开关打开，方向可随传感器旋转为横屏， 包括横屏和反向横屏。- auto_rotation_portrait_restricted：传感器开关打开，方向随可传感器旋转为竖屏， 包括竖屏和反向竖屏。- locked：传感器开关关闭，方向锁定。- auto_rotation_unspecified：受开关控制和由系统判定的自动旋转模式。- follow_desktop：跟随桌面的旋转模式。配置启动方向的资源索引时，取值为长度不超过255字节的字符串。启动方向资源索引配置示例：$string:orientation。字符串该标签可缺省，缺省值为unspecified。supportWindowMode标识当前UIAbility组件所支持的窗口模式。支持的取值如下：- fullscreen：全屏模式。- split：分屏模式。- floating：悬浮窗模式。字符串数组该标签可缺省，缺省值为["fullscreen", "split", "floating"]。maxWindowRatio标识当前UIAbility组件支持的最大的宽高比。该标签最小取值为0。数值该标签可缺省，缺省值为平台支持的最大的宽高比。minWindowRatio标识当前UIAbility组件支持的最小的宽高比。该标签最小取值为0。数值该标签可缺省，缺省值为平台支持的最小的宽高比。maxWindowWidth标识当前UIAbility组件支持的最大的窗口宽度，宽度单位为vp。最小取值为minWindowWidth，最大取值为平台支持的最大窗口宽度。窗口尺寸可以参考窗口大小限制。数值该标签可缺省，缺省值为平台支持的最大的窗口宽度。minWindowWidth标识当前UIAbility组件支持的最小的窗口宽度， 宽度单位为vp。最小取值为平台支持的最小窗口宽度，最大取值为maxWindowWidth。窗口尺寸可以参考窗口大小限制。数值该标签可缺省，缺省值为平台支持的最小的窗口宽度。maxWindowHeight标识当前UIAbility组件支持的最大的窗口高度， 高度单位为vp。最小取值为minWindowHeight，最大取值为平台支持的最大窗口高度。 窗口尺寸可以参考窗口大小限制。数值该标签可缺省，缺省值为平台支持的最大的窗口高度。minWindowHeight标识当前UIAbility组件支持的最小的窗口高度， 高度单位为vp。最小取值为平台支持的最小窗口高度，最大取值为maxWindowHeight。窗口尺寸可以参考窗口大小限制。数值该标签可缺省，缺省值为平台支持的最小的窗口高度。recoverable标识当前UIAbility组件是否支持在检测到应用故障后，恢复到应用原界面。- true：支持检测到出现故障后，恢复到原界面。- false：不支持检测到出现故障后，恢复到原界面。布尔值该标签可缺省，缺省值为false。isolationProcess标识组件能否运行在独立的进程中。- true：表示能运行在独立的进程中。- false：表示不能运行在独立的进程中。说明：仅2in1和tablet设备支持将UIAbility设置为独立进程。布尔值该标签可缺省，缺省值为false。excludeFromDock标识当前UIAbility组件是否支持从dock区域隐藏图标。- true：表示在dock区域隐藏。- false：表示不能在dock区域隐藏。布尔值该标签可缺省，缺省值为false。preferMultiWindowOrientation标识当前UIAbility组件多窗布局方向：- default：缺省值，参数不配置默认值，建议其他应用类配置。- portrait：多窗布局方向为竖向，建议竖向游戏类应用配置。- landscape：多窗布局方向为横向，配置后支持横屏悬浮窗和上下分屏，建议横向游戏类应用配置。- landscape_auto：多窗布局动态可变为横向，需要配合API enableLandScapeMultiWindow/disableLandScapeMultiWindow使用，建议视频类应用配置。字符串该标签可缺省，缺省值为default。continueType标识当前UIAbility组件的跨端迁移类型。字符串数组该标签可缺省，缺省值为当前组件的名称。continueBundleName标识当前应用支持跨端迁移的其它应用名称列表。说明：不能配置为本应用包名，仅为了做异包名迁移使用。字符串数组该标签可缺省，缺省值为空。process标识组件的进程标签。说明：仅在2in1设备上生效，UIAbility组件和type为embeddedUI的ExtensionAbility组件标签一致时运行在同一个进程中。字符串该标签可缺省，缺省值为空。

标识当前UIAbility组件的启动模式，支持的取值如下：

- multiton：多实例模式，每次启动创建一个新实例。

- singleton：单实例模式，仅第一次启动创建新实例。

- specified：指定实例模式，运行时由开发者决定是否创建新实例。

- standard：multiton的曾用名，效果与多实例模式一致。

标识当前UIAbility组件自定义的权限信息。当其他应用访问该UIAbility时，需要申请相应的权限信息。

一个数组元素为一个权限名称。通常采用反向域名格式（不超过255字节），取值为系统预定义的权限。

标识当前UIAbility组件是否可以被其他应用调用。

- true：表示可以被其他应用调用。

- false：表示不可以被其他应用调用，包括无法被aa工具命令拉起应用。

标识当前UIAbility组件是否支持跨端迁移。

- true：表示支持迁移。

- false：表示不支持迁移。

标识当前UIAbility组件或ExtensionAbility组件能够接收的Want特征集，为数组格式。

配置规则：

- 对于Entry类型的HAP，应用可以配置多个具有入口能力的skills标签（即配置了action.system.home和entity.system.home）。

- 对于Feature类型的HAP，只有应用可以配置具有入口能力的skills标签，服务不允许配置。

标识当前UIAbility组件的长时任务集合，指定用于满足特定类型的长时任务。

长时任务类型有如下：

- dataTransfer：通过网络/对端设备进行数据下载、备份、分享、传输等。

- audioPlayback：音频播放。

- audioRecording：录音。

- location：定位、导航。

- bluetoothInteraction：蓝牙扫描、连接、传输（穿戴）。

- multiDeviceConnection：多设备互联。

- taskKeeping：计算。

标识当前UIAbility组件启动页面背景颜色资源文件的索引，取值为长度不超过255字节的字符串。

取值示例：$color:red。

标识当前UIAbility组件销毁后，是否从任务列表中移除任务。

- true表示销毁后移除任务。

- false表示销毁后不移除任务。

标识当前UIAbility组件启动时的方向，支持配置枚举和启动方向资源索引。枚举支持的取值如下：

- unspecified：未指定方向，由系统自动判断显示方向。

- landscape：横屏。

- portrait：竖屏。

- follow_recent：跟随背景窗口的旋转模式。

- landscape_inverted：反向横屏。

- portrait_inverted：反向竖屏。

- auto_rotation：随传感器旋转。

- auto_rotation_landscape：传感器横屏旋转，包括横屏和反向横屏。

- auto_rotation_portrait：传感器竖屏旋转，包括竖屏和反向竖屏。

- auto_rotation_restricted：传感器开关打开，方向可随传感器旋转。

- auto_rotation_landscape_restricted：传感器开关打开，方向可随传感器旋转为横屏， 包括横屏和反向横屏。

- auto_rotation_portrait_restricted：传感器开关打开，方向随可传感器旋转为竖屏， 包括竖屏和反向竖屏。

- locked：传感器开关关闭，方向锁定。

- auto_rotation_unspecified：受开关控制和由系统判定的自动旋转模式。

- follow_desktop：跟随桌面的旋转模式。

配置启动方向的资源索引时，取值为长度不超过255字节的字符串。

启动方向资源索引配置示例：$string:orientation。

标识当前UIAbility组件所支持的窗口模式。支持的取值如下：

- fullscreen：全屏模式。

- split：分屏模式。

- floating：悬浮窗模式。

该标签可缺省，缺省值为

["fullscreen", "split", "floating"]。

标识当前UIAbility组件支持的最大的窗口宽度，宽度单位为vp。

最小取值为minWindowWidth，最大取值为平台支持的最大窗口宽度。窗口尺寸可以参考窗口大小限制。

标识当前UIAbility组件支持的最小的窗口宽度， 宽度单位为vp。

最小取值为平台支持的最小窗口宽度，最大取值为maxWindowWidth。窗口尺寸可以参考窗口大小限制。

标识当前UIAbility组件支持的最大的窗口高度， 高度单位为vp。

最小取值为minWindowHeight，最大取值为平台支持的最大窗口高度。 窗口尺寸可以参考窗口大小限制。

标识当前UIAbility组件支持的最小的窗口高度， 高度单位为vp。

最小取值为平台支持的最小窗口高度，最大取值为maxWindowHeight。窗口尺寸可以参考窗口大小限制。

标识当前UIAbility组件是否支持在检测到应用故障后，恢复到应用原界面。

- true：支持检测到出现故障后，恢复到原界面。

- false：不支持检测到出现故障后，恢复到原界面。

标识组件能否运行在独立的进程中。

- true：表示能运行在独立的进程中。

- false：表示不能运行在独立的进程中。

仅2in1和tablet设备支持将UIAbility设置为独立进程。

标识当前UIAbility组件是否支持从dock区域隐藏图标。

- true：表示在dock区域隐藏。

- false：表示不能在dock区域隐藏。

标识当前UIAbility组件多窗布局方向：

- default：缺省值，参数不配置默认值，建议其他应用类配置。

- portrait：多窗布局方向为竖向，建议竖向游戏类应用配置。

- landscape：多窗布局方向为横向，配置后支持横屏悬浮窗和上下分屏，建议横向游戏类应用配置。

- landscape_auto：多窗布局动态可变为横向，需要配合API enableLandScapeMultiWindow/disableLandScapeMultiWindow使用，建议视频类应用配置。

标识当前应用支持跨端迁移的其它应用名称列表。

不能配置为本应用包名，仅为了做异包名迁移使用。

标识组件的进程标签。

仅在2in1设备上生效，UIAbility组件和type为embeddedUI的ExtensionAbility组件标签一致时运行在同一个进程中。

abilities示例：

收起深色代码主题复制{"abilities":[{"name":"EntryAbility","srcEntry":"./ets/entryability/EntryAbility.ets","launchType":"singleton","description":"$string:description_main_ability","icon":"$media:layered_image","label":"Login","permissions":[],"metadata":[],"exported":true,"continuable":true,"skills":[{"actions":["ohos.want.action.home"],"entities":["entity.system.home"],"uris":[]}],"backgroundModes":["dataTransfer","audioPlayback","audioRecording","location","bluetoothInteraction","multiDeviceConnection","wifiInteraction","voip","taskKeeping"],"startWindowIcon":"$media:icon","startWindowBackground":"$color:red","removeMissionAfterTerminate":true,"orientation":"$string:orientation","supportWindowMode":["fullscreen","split","floating"],"maxWindowRatio":3.5,"minWindowRatio":0.5,"maxWindowWidth":2560,"minWindowWidth":1400,"maxWindowHeight":300,"minWindowHeight":200,"excludeFromDock":false,"preferMultiWindowOrientation":"default","isolationProcess":false,"continueType":["continueType1","continueType2"],"continueBundleName":["com.example.myapplication1","com.example.myapplication2"],"process":":processTag"}]}

``` {"abilities":[{"name":"EntryAbility","srcEntry":"./ets/entryability/EntryAbility.ets","launchType":"singleton","description":"$string:description_main_ability","icon":"$media:layered_image","label":"Login","permissions":[],"metadata":[],"exported":true,"continuable":true,"skills":[{"actions":["ohos.want.action.home"],"entities":["entity.system.home"],"uris":[]}],"backgroundModes":["dataTransfer","audioPlayback","audioRecording","location","bluetoothInteraction","multiDeviceConnection","wifiInteraction","voip","taskKeeping"],"startWindowIcon":"$media:icon","startWindowBackground":"$color:red","removeMissionAfterTerminate":true,"orientation":"$string:orientation","supportWindowMode":["fullscreen","split","floating"],"maxWindowRatio":3.5,"minWindowRatio":0.5,"maxWindowWidth":2560,"minWindowWidth":1400,"maxWindowHeight":300,"minWindowHeight":200,"excludeFromDock":false,"preferMultiWindowOrientation":"default","isolationProcess":false,"continueType":["continueType1","continueType2"],"continueBundleName":["com.example.myapplication1","com.example.myapplication2"],"process":":processTag"}]} ```

"srcEntry":"./ets/entryability/EntryAbility.ets",

"./ets/entryability/EntryAbility.ets"

"launchType":"singleton",

"launchType"

"singleton"

"description":"$string:description_main_ability",

"$string:description_main_ability"

"icon":"$media:layered_image",

"$media:layered_image"

"label":"Login",

"Login"

"permissions":[],

"permissions"

"metadata":[],

"continuable":true,

"continuable"

"skills":[{

"actions":["ohos.want.action.home"],

"entities":["entity.system.home"],

"uris":[]

"uris"

"backgroundModes":[

"backgroundModes"

"dataTransfer",

"dataTransfer"

"audioPlayback",

"audioPlayback"

"audioRecording",

"audioRecording"

"location",

"location"

"bluetoothInteraction",

"bluetoothInteraction"

"multiDeviceConnection",

"multiDeviceConnection"

"wifiInteraction",

"wifiInteraction"

"voip",

"voip"

"taskKeeping"

"startWindowBackground":"$color:red",

"$color:red"

"removeMissionAfterTerminate":true,

"removeMissionAfterTerminate"

"orientation":"$string:orientation",

"orientation"

"$string:orientation"

"supportWindowMode":["fullscreen","split","floating"],

"supportWindowMode"

"fullscreen"

"split"

"floating"

"maxWindowRatio":3.5,

"maxWindowRatio"

3.5

"minWindowRatio":0.5,

"minWindowRatio"

0.5

"maxWindowWidth":2560,

"maxWindowWidth"

2560

"minWindowWidth":1400,

"minWindowWidth"

1400

"maxWindowHeight":300,

"maxWindowHeight"

300

"minWindowHeight":200,

"minWindowHeight"

200

"excludeFromDock":false,

"excludeFromDock"

"preferMultiWindowOrientation":"default",

"preferMultiWindowOrientation"

"default"

"isolationProcess":false,

"isolationProcess"

"continueType":[

"continueType"

"continueType1",

"continueType1"

"continueType2"

"continueBundleName":[

"continueBundleName"

"com.example.myapplication1",

"com.example.myapplication1"

"com.example.myapplication2"

"process":":processTag"

"process"

":processTag"

skills标签

该标签标识UIAbility组件或者ExtensionAbility组件能够接收的Want的特征。

表7skills标签说明

属性名称含义数据类型是否可缺省actions标识能够接收的Action值集合，取值通常为系统预定义的action值，也允许自定义。一个skill中不建议配置多个action，否则可能导致无法匹配预期场景。字符串数组该标签可缺省，缺省值为空。entities标识能够接收的Entity值的集合。一个skill中不建议配置多个entity，否则可能导致无法匹配预期场景。字符串数组该标签可缺省，缺省值为空。uris标识与Want中URI（Uniform Resource Identifier）相匹配的集合。数组允许的最大数量为512。对象数组该标签可缺省，缺省值为空。permissions标识当前UIAbility组件自定义的权限信息。当其他应用访问该UIAbility时，需要申请相应的权限信息。一个数组元素为一个权限名称。通常采用反向域名格式（不超过255字节），取值为系统预定义的权限。字符串数组该标签可缺省，缺省值为空。domainVerify标识是否开启域名校验。布尔值该标签可缺省，缺省值为false。

标识能够接收的Action值集合，取值通常为系统预定义的action值，也允许自定义。

一个skill中不建议配置多个action，否则可能导致无法匹配预期场景。

标识能够接收的Entity值的集合。

一个skill中不建议配置多个entity，否则可能导致无法匹配预期场景。

表8uris标签说明

属性名称含义数据类型是否可缺省scheme标识URI的协议名部分，常见的有http、https、file、ftp等。字符串uris中仅配置type时可以缺省，缺省值为空，否则不可缺省。host标识URI的主机地址部分，该字段在scheme存在时才有意义。常见的方式：- 域名方式，如example.com。- IP地址方式，如10.10.10.1。字符串该标签可缺省，缺省值为空。port标识URI的端口部分。如http默认端口为80，https默认端口是443，ftp默认端口是21。该字段在scheme和host都存在时才有意义。字符串该标签可缺省，缺省值为空。path | pathStartWith | pathRegex标识URI的路径部分，path、pathStartWith和pathRegex配置时三选一。path标识URI与want中的路径部分全匹配，pathStartWith标识URI与want中的路径部分允许前缀匹配，pathRegex标识URI与want中的路径部分允许正则匹配。该字段在scheme和host都存在时才有意义。字符串该标签可缺省，缺省值为空。type标识与Want相匹配的数据类型，使用MIME（Multipurpose Internet Mail Extensions）类型规范和UniformDataType类型规范。可与scheme同时配置，也可以单独配置。字符串该标签可缺省，缺省值为空。utd标识与Want相匹配的标准化数据类型，适用于分享等场景。字符串该标签可缺省，缺省值为空。maxFileSupported对于指定类型的文件，标识一次能接收或打开的最大数量，适用于分享等场景，需要与utd配合使用。整数该标签可缺省，缺省值为0。linkFeature标识URI提供的功能类型（如文件打开、分享、导航等），用于实现应用间跳转。取值为长度不超过127字节的字符串，不支持中文。同一Bundle中声明的linkFeature数量不能超过150个。详情见linkFeature标签说明。字符串该标签可缺省，缺省值为空。

标识URI的主机地址部分，该字段在scheme存在时才有意义。常见的方式：

- 域名方式，如example.com。

- IP地址方式，如10.10.10.1。

skills示例：

收起深色代码主题复制{"abilities":[{"skills":[{"actions":["action.system.home"],"entities":["entity.system.home"],"uris":[{"scheme":"http","host":"example.com","port":"80","path":"path","type":"text/*","linkFeature":"Login"}],"permissions":[],"domainVerify":false}]}]}

``` {"abilities":[{"skills":[{"actions":["action.system.home"],"entities":["entity.system.home"],"uris":[{"scheme":"http","host":"example.com","port":"80","path":"path","type":"text/*","linkFeature":"Login"}],"permissions":[],"domainVerify":false}]}]} ```

"action.system.home"

"uris":[

"scheme":"http",

"scheme"

"http"

"host":"example.com",

"host"

"example.com"

"port":"80",

"port"

"80"

"path":"path",

"path"

"type":"text/*",

"text/*"

"linkFeature":"Login"

"linkFeature"

"domainVerify":false

"domainVerify"

extensionAbilities标签

描述extensionAbilities的配置信息，标签值为数组类型，该标签下的配置只对当前extensionAbilities生效。

表9extensionAbilities标签说明

属性名称含义数据类型是否可缺省name标识当前ExtensionAbility组件的名称，确保该名称在整个应用中唯一，取值为长度不超过127字节的字符串。字符串该标签不可缺省。srcEntry标识当前ExtensionAbility组件所对应的代码路径，取值为长度不超过127字节的字符串。字符串该标签不可缺省。description标识当前ExtensionAbility组件的描述，开发者可以通过该字段描述当前组件的功能与作用，取值为长度不超过255字节的字符串，可以是对描述内容的资源索引，用于支持多语言。字符串该标签可缺省，缺省值为空。icon标识当前ExtensionAbility组件的图标，取值为资源文件的索引。如果ExtensionAbility组件被配置为MainElement，该标签必须配置。字符串该标签可缺省，缺省值为空。label标识当前ExtensionAbility组件对用户显示的名称，取值为该名称的资源索引，以支持多语言，字符串长度不超过255字节。如果ExtensionAbility被配置当前Module的mainElement时，该标签必须配置，且要确保应用内唯一。字符串该标签可缺省，缺省值为空。type标识当前ExtensionAbility组件的类型，支持的取值如下：- form：卡片的ExtensionAbility。- workScheduler：延时任务的ExtensionAbility。- inputMethod：输入法的ExtensionAbility。- accessibility：辅助能力的ExtensionAbility。- wallpaper：壁纸的ExtensionAbility。- backup：数据备份的ExtensionAbility。- thumbnail：获取文件缩略图的ExtensionAbility，开发者可以对自定义文件类型的文件提供缩略。- preview：该ExtensionAbility会将文件解析后在一个窗口中显示，开发者可以通过将此窗口组合到其他应用窗口中。- print：打印框架的ExtensionAbility。- push：推送的ExtensionAbility。- driver：驱动框架的ExtensionAbility。- remoteNotification：远程通知的ExtensionAbility。- remoteLocation：远程定位的ExtensionAbility。- voip：网络音视频通话的ExtensionAbility。- action：自定义操作业务模板的ExtensionAbility，为开发者提供基于UIExtension的自定义操作业务模板。- embeddedUI：嵌入式UI扩展能力，提供跨进程界面嵌入的能力。- insightIntentUI：为开发者提供能被小艺意图调用，以窗口形态呈现内容的扩展能力。- ads：广告业务的ExtensionAbility，与AdComponent控件组合使用，将广告页面展示到其他应用中。仅支持设备厂商使用。- photoEditor：图片编辑业务的ExtensionAbility，为开发者提供基于UIExtension的图片编辑业务模版。- appAccountAuthorization：应用账号授权扩展能力的ExtensionAbility，用于处理账号授权请求，比如账号登录授权。- autoFill/password：用于账号和密码自动填充业务的ExtensionAbility，支持数据的保存、填充能力。- hms/account：应用账号管理能力的ExtensionAbility。- autoFill/smart：用于情景化场景自动填充业务的ExtensionAbility，支持数据的保存、填充能力。- statusBarView：一步直达的ExtensionAbility。- recentPhoto：最近照片推荐的ExtensionAbility。- fence：地理围栏的ExtensionAbility。- callerInfoQuery：企业联系人查询的ExtensionAbility。字符串该标签不可缺省。permissions标识当前ExtensionAbility组件自定义的权限信息。当其他应用访问该ExtensionAbility时，需要申请相应的权限信息。一个数组元素为一个权限名称。通常采用反向域名格式（最大255字节），取值为系统预定义的权限。字符串数组该标签可缺省，缺省值为空。readPermission标识读取当前ExtensionAbility组件数据所需的权限，取值为长度不超过255字节的字符串。仅当ExtensionAbility组件的type为dataShare时支持配置该标签。字符串该标签可缺省，缺省值为空。writePermission标识向当前ExtensionAbility组件写数据所需的权限，取值为长度不超过255字节的字符串。仅当ExtensionAbility组件的type为dataShare时支持配置该标签。字符串该标签可缺省，缺省值为空。uri标识当前ExtensionAbility组件提供的数据URI，取值为长度不超过255字节的字符数组，用反向域名的格式表示。说明：该标签在type为dataShare类型的ExtensionAbility时，不可缺省。字符串该标签可缺省，缺省值为空。skills标识当前ExtensionAbility组件能够接收的Want的特征集。配置规则：entry包可以配置多个具有入口能力的skills标签（配置了action.system.home和entity.system.home）的ExtensionAbility，其中第一个配置了skills标签的ExtensionAbility中的label和icon作为服务或应用的label和icon。说明：服务的Feature包不能配置具有入口能力的skills标签。应用的Feature包可以配置具有入口能力的skills标签。数组该标签可缺省，缺省值为空。metadata标识当前ExtensionAbility组件的元信息。说明：该标签在type为form时，不可缺省，且必须存在一个name为ohos.extension.form的对象值，其对应的resource值不能缺省，为卡片的二级资源引用。对象数组该标签可缺省，缺省值为空。exported标识当前ExtensionAbility组件是否可以被其他应用调用。- true：表示可以被其他应用调用。- false：表示不可以被其他应用调用，包括无法被aa工具命令拉起应用。布尔值该标签可缺省，缺省值为false。extensionProcessMode标识当前ExtensionAbility组件的多进程实例模型,当前只对UIExtensionAbility以及从UIExtensionAbility扩展的ExtensionAbility生效。- instance：表示该ExtensionAbility每个实例一个进程。- type：表示该ExtensionAbility实例都运行在同一个进程里，与其他ExtensionAbility分离进程。- bundle：表示该ExtensionAbility实例都运行在应用统一进程里，与其他配置了bundle模型的ExtensionAbility共进程。- runWithMainProcess：表示该ExtensionAbility和应用主进程共进程，只有一步直达的ExtensionAbility可以配置runWithMainProcess。字符串该标签可缺省，缺省值为空。dataGroupIds标识当前ExtensionAbility组件的dataGroupId集合。如果当前ExtensionAbility组件所在的应用在应用市场申请的证书里groupIds也申请了某个dataGroupId，那么当前ExtensionAbility组件可以和应用共享这一个dataGroupId生成的目录，所以ExtensionAbility组件的dataGroupId需要是应用的证书中groupIds字段里配置的才能生效。 且该字段仅在当前ExtensionAbility组件存在独立的沙箱目录时生效。详见dataGroupId申请流程。字符串数组该标签可缺省，缺省值为空。process标识组件的进程标签，只有type为embeddedUI时可以配置该字段。说明：仅在2in1设备上生效，UIAbility组件和ExtensionAbility组件标签一致时运行在同一个进程中。字符串该标签可缺省，缺省值为空。

标识当前ExtensionAbility组件的类型，支持的取值如下：

- form：卡片的ExtensionAbility。

- workScheduler：延时任务的ExtensionAbility。

- inputMethod：输入法的ExtensionAbility。

- accessibility：辅助能力的ExtensionAbility。

- wallpaper：壁纸的ExtensionAbility。

- backup：数据备份的ExtensionAbility。

- thumbnail：获取文件缩略图的ExtensionAbility，开发者可以对自定义文件类型的文件提供缩略。

- preview：该ExtensionAbility会将文件解析后在一个窗口中显示，开发者可以通过将此窗口组合到其他应用窗口中。

- print：打印框架的ExtensionAbility。

- push：推送的ExtensionAbility。

- driver：驱动框架的ExtensionAbility。

- remoteNotification：远程通知的ExtensionAbility。

- remoteLocation：远程定位的ExtensionAbility。

- voip：网络音视频通话的ExtensionAbility。

- action：自定义操作业务模板的ExtensionAbility，为开发者提供基于UIExtension的自定义操作业务模板。

- embeddedUI：嵌入式UI扩展能力，提供跨进程界面嵌入的能力。

- insightIntentUI：为开发者提供能被小艺意图调用，以窗口形态呈现内容的扩展能力。

- ads：广告业务的ExtensionAbility，与AdComponent控件组合使用，将广告页面展示到其他应用中。仅支持设备厂商使用。

- photoEditor：图片编辑业务的ExtensionAbility，为开发者提供基于UIExtension的图片编辑业务模版。

- appAccountAuthorization：应用账号授权扩展能力的ExtensionAbility，用于处理账号授权请求，比如账号登录授权。

- autoFill/password：用于账号和密码自动填充业务的ExtensionAbility，支持数据的保存、填充能力。

- hms/account：应用账号管理能力的ExtensionAbility。

- autoFill/smart：用于情景化场景自动填充业务的ExtensionAbility，支持数据的保存、填充能力。

- statusBarView：一步直达的ExtensionAbility。

- recentPhoto：最近照片推荐的ExtensionAbility。

- fence：地理围栏的ExtensionAbility。

- callerInfoQuery：企业联系人查询的ExtensionAbility。

标识当前ExtensionAbility组件自定义的权限信息。当其他应用访问该ExtensionAbility时，需要申请相应的权限信息。

一个数组元素为一个权限名称。通常采用反向域名格式（最大255字节），取值为系统预定义的权限。

标识当前ExtensionAbility组件提供的数据URI，取值为长度不超过255字节的字符数组，用反向域名的格式表示。

该标签在type为dataShare类型的ExtensionAbility时，不可缺省。

标识当前ExtensionAbility组件能够接收的Want的特征集。

配置规则：entry包可以配置多个具有入口能力的skills标签（配置了action.system.home和entity.system.home）的ExtensionAbility，其中第一个配置了skills标签的ExtensionAbility中的label和icon作为服务或应用的label和icon。

服务的Feature包不能配置具有入口能力的skills标签。

应用的Feature包可以配置具有入口能力的skills标签。

标识当前ExtensionAbility组件的元信息。

该标签在type为form时，不可缺省，且必须存在一个name为ohos.extension.form的对象值，其对应的resource值不能缺省，为卡片的二级资源引用。

标识当前ExtensionAbility组件是否可以被其他应用调用。

标识当前ExtensionAbility组件的多进程实例模型,当前只对UIExtensionAbility以及从UIExtensionAbility扩展的ExtensionAbility生效。

- instance：表示该ExtensionAbility每个实例一个进程。

- type：表示该ExtensionAbility实例都运行在同一个进程里，与其他ExtensionAbility分离进程。

- bundle：表示该ExtensionAbility实例都运行在应用统一进程里，与其他配置了bundle模型的ExtensionAbility共进程。

- runWithMainProcess：表示该ExtensionAbility和应用主进程共进程，只有一步直达的ExtensionAbility可以配置runWithMainProcess。

标识组件的进程标签，只有type为embeddedUI时可以配置该字段。

仅在2in1设备上生效，UIAbility组件和ExtensionAbility组件标签一致时运行在同一个进程中。

extensionAbilities示例：

收起深色代码主题复制{"extensionAbilities":[{"name":"FormName","srcEntry":"./form/MyForm.ts","icon":"$media:icon","label":"$string:extension_name","description":"$string:form_description","type":"form","permissions":["ohos.abilitydemo.permission.PROVIDER"],"readPermission":"","writePermission":"","exported":true,"uri":"scheme://authority/path/query","skills":[{"actions":[],"entities":[],"uris":[],"permissions":[]}],"metadata":[{"name":"ohos.extension.form","resource":"$profile:form_config",}],"extensionProcessMode":"instance","dataGroupIds":["testGroupId1"]}]}

``` {"extensionAbilities":[{"name":"FormName","srcEntry":"./form/MyForm.ts","icon":"$media:icon","label":"$string:extension_name","description":"$string:form_description","type":"form","permissions":["ohos.abilitydemo.permission.PROVIDER"],"readPermission":"","writePermission":"","exported":true,"uri":"scheme://authority/path/query","skills":[{"actions":[],"entities":[],"uris":[],"permissions":[]}],"metadata":[{"name":"ohos.extension.form","resource":"$profile:form_config",}],"extensionProcessMode":"instance","dataGroupIds":["testGroupId1"]}]} ```

"extensionAbilities":[

"name":"FormName",

"FormName"

"srcEntry":"./form/MyForm.ts",

"./form/MyForm.ts"

"label":"$string:extension_name",

"$string:extension_name"

"description":"$string:form_description",

"$string:form_description"

"type":"form",

"form"

"permissions":["ohos.abilitydemo.permission.PROVIDER"],

"readPermission":"",

"readPermission"

""

"writePermission":"",

"writePermission"

"uri":"scheme://authority/path/query",

"uri"

"scheme://authority/path/query"

"actions":[],

"entities":[],

"uris":[],

"permissions":[]

"name":"ohos.extension.form",

"ohos.extension.form"

"resource":"$profile:form_config",

"$profile:form_config"

"extensionProcessMode":"instance",

"extensionProcessMode"

"instance"

"dataGroupIds":[

"dataGroupIds"

"testGroupId1"

shortcuts标签

shortcuts标识应用的快捷方式信息。标签值为数组，包含四个子标签shortcutId、label、icon、wants。

metadata中指定shortcut信息，其中：

name：指定shortcuts的名称，使用ohos.ability.shortcuts作为shortcuts信息的标识。

resource：指定shortcuts信息的资源位置。

表11shortcuts标签说明

属性名称含义类型是否可缺省shortcutId标识快捷方式的ID，取值为长度不超过63字节的字符串。不推荐通过资源索引的方式（$string）配置该字段。字符串该标签不可缺省。label标识快捷方式的标签信息，即快捷方式对外显示的文字描述信息。取值为长度不超过255字节的字符串，可以是描述性内容，也可以是标识label的资源索引。字符串该标签可缺省，缺省值为空。icon标识快捷方式的图标，取值为资源文件的索引。字符串该标签可缺省，缺省值为空。wants标识快捷方式内定义的目标wants信息集合，在调用launcherBundleManager的startShortcut接口时，会拉起wants标签里的第一个目标组件，推荐只配置一个wants元素。对象该标签可缺省，缺省为空。

在/resources/base/profile/目录下配置shortcuts_config.json配置文件。收起深色代码主题复制{"shortcuts":[{"shortcutId":"id_test1","label":"$string:shortcut","icon":"$media:aa_icon","wants":[{"bundleName":"com.ohos.hello","moduleName":"entry","abilityName":"EntryAbility","parameters":{"testKey":"testValue"}}]}]}

在/resources/base/profile/目录下配置shortcuts_config.json配置文件。

收起深色代码主题复制{"shortcuts":[{"shortcutId":"id_test1","label":"$string:shortcut","icon":"$media:aa_icon","wants":[{"bundleName":"com.ohos.hello","moduleName":"entry","abilityName":"EntryAbility","parameters":{"testKey":"testValue"}}]}]}

``` {"shortcuts":[{"shortcutId":"id_test1","label":"$string:shortcut","icon":"$media:aa_icon","wants":[{"bundleName":"com.ohos.hello","moduleName":"entry","abilityName":"EntryAbility","parameters":{"testKey":"testValue"}}]}]} ```

"shortcuts":[

"shortcuts"

"shortcutId":"id_test1",

"shortcutId"

"id_test1"

"label":"$string:shortcut",

"$string:shortcut"

"icon":"$media:aa_icon",

"$media:aa_icon"

"wants":[

"wants"

"bundleName":"com.ohos.hello",

"bundleName"

"com.ohos.hello"

"moduleName":"entry",

"moduleName"

"abilityName":"EntryAbility",

"abilityName"

"parameters":{

"parameters"

"testKey":"testValue"

"testKey"

"testValue"

在module.json5配置文件的abilities标签中，针对需要添加快捷方式的UIAbility进行配置metadata标签，使shortcut配置文件对该UIAbility生效。收起深色代码主题复制{"module":{// ..."abilities":[{"name":"EntryAbility","srcEntry":"./ets/entryability/EntryAbility.ets",// ..."skills":[{"entities":["entity.system.home"],"actions":["action.system.home"]}],"metadata":[{"name":"ohos.ability.shortcuts","resource":"$profile:shortcuts_config"}]}]}}

在module.json5配置文件的abilities标签中，针对需要添加快捷方式的UIAbility进行配置metadata标签，使shortcut配置文件对该UIAbility生效。

收起深色代码主题复制{"module":{// ..."abilities":[{"name":"EntryAbility","srcEntry":"./ets/entryability/EntryAbility.ets",// ..."skills":[{"entities":["entity.system.home"],"actions":["action.system.home"]}],"metadata":[{"name":"ohos.ability.shortcuts","resource":"$profile:shortcuts_config"}]}]}}

``` {"module":{// ..."abilities":[{"name":"EntryAbility","srcEntry":"./ets/entryability/EntryAbility.ets",// ..."skills":[{"entities":["entity.system.home"],"actions":["action.system.home"]}],"metadata":[{"name":"ohos.ability.shortcuts","resource":"$profile:shortcuts_config"}]}]}} ```

"name":"ohos.ability.shortcuts",

"ohos.ability.shortcuts"

wants标签

此标签用于标识快捷方式内定义的目标wants信息集合。

表11-1wants标签说明

属性名称含义类型是否可缺省bundleName表示快捷方式的目标包名。字符串该标签不可缺省。moduleName表示快捷方式的目标模块名。字符串该标签可缺省。abilityName表示快捷方式的目标组件名。字符串该标签不可缺省。parameters表示拉起快捷方式时的自定义数据，仅支持配置字符串类型的数据。其中键值均最大支持1024长度的字符串。对象该标签可缺省。

data标签示例：

收起深色代码主题复制{"wants":[{"bundleName":"com.ohos.hello","moduleName":"entry","abilityName":"EntryAbility","parameters":{"testKey":"testValue"}}]}

``` {"wants":[{"bundleName":"com.ohos.hello","moduleName":"entry","abilityName":"EntryAbility","parameters":{"testKey":"testValue"}}]} ```

distributionFilter标签

该标签用于定义HAP对应的细分设备规格的分发策略，以便在应用市场进行云端分发应用包时做精准匹配。

说明该标签从API10及以后版本开始生效，API9及以前版本使用distroFilter标签。

说明

该标签从API10及以后版本开始生效，API9及以前版本使用distroFilter标签。

适用场景：当一个工程中存在多个Entry，且多个Entry配置的deviceTypes存在交集时，则需要通过该标签进行区分。比如下面的两个Entry都支持tablet类型，就需要通过该标签进行区分。收起深色代码主题复制// entry1支持的设备类型{"module":{"name":"entry1","type":"entry","deviceTypes":["tv","tablet"]}}收起深色代码主题复制// entry2支持的设备类型{"module":{"name":"entry2","type":"entry","deviceTypes":["car","tablet"]}}

适用场景：当一个工程中存在多个Entry，且多个Entry配置的deviceTypes存在交集时，则需要通过该标签进行区分。比如下面的两个Entry都支持tablet类型，就需要通过该标签进行区分。

收起深色代码主题复制// entry1支持的设备类型{"module":{"name":"entry1","type":"entry","deviceTypes":["tv","tablet"]}}

``` // entry1支持的设备类型{"module":{"name":"entry1","type":"entry","deviceTypes":["tv","tablet"]}} ```

// entry1支持的设备类型

"name":"entry1",

"entry1"

收起深色代码主题复制// entry2支持的设备类型{"module":{"name":"entry2","type":"entry","deviceTypes":["car","tablet"]}}

``` // entry2支持的设备类型{"module":{"name":"entry2","type":"entry","deviceTypes":["car","tablet"]}} ```

// entry2支持的设备类型

"name":"entry2",

"entry2"

"car",

"car"

配置规则：该标签支持配置四个属性，包括屏幕形状(screenShape)、窗口分辨率(screenWindow)、屏幕像素密度(screenDensity)、设备所在国家与地区(countryCode)，详见下表。在分发应用包时，通过deviceTypes与这四个属性的匹配关系，唯一确定一个用于分发到设备的HAP。如果需要配置该标签，则至少包含一个属性。如果一个Entry中配置了任意一个或多个属性，则其他Entry也必须包含相同的属性。screenShape和screenWindow属性仅用于轻量级智能穿戴设备。

配置规则：该标签支持配置四个属性，包括屏幕形状(screenShape)、窗口分辨率(screenWindow)、屏幕像素密度(screenDensity)、设备所在国家与地区(countryCode)，详见下表。

在分发应用包时，通过deviceTypes与这四个属性的匹配关系，唯一确定一个用于分发到设备的HAP。

如果需要配置该标签，则至少包含一个属性。

如果一个Entry中配置了任意一个或多个属性，则其他Entry也必须包含相同的属性。

screenShape和screenWindow属性仅用于轻量级智能穿戴设备。

配置方式：该标签需要配置在/resources/base/profile资源目录下，并在metadata的resource字段中引用。

表12distributionFilter标签配置说明

属性名称含义数据类型是否可缺省screenShape标识屏幕形状的支持策略。对象数组该标签可缺省，缺省值为空。screenWindow标识应用运行时的窗口分辨率的支持策略。对象数组该标签可缺省，缺省值为空。screenDensity标识屏幕的像素密度（dpi：Dot Per Inch）的支持策略。对象数组该标签可缺省，缺省值为空。countryCode标识国家与地区的支持策略，取值参考ISO-3166-1标准。支持多个国家和地区枚举定义。对象数组该标签可缺省，缺省值为空。

screenShape标签

表13screenShape标签说明

属性名称含义数据类型是否可缺省policy标识条件属性的过滤规则。- exclude：表示需要排除的value属性。- include：表示需要包含的value属性。字符串该标签不可缺省。value支持的取值为circle（圆形）、rect（矩形）。例如，针对智能穿戴设备，可为圆形表盘和矩形表盘分别提供不同的HAP。字符串数组该标签不可缺省。

标识条件属性的过滤规则。

- exclude：表示需要排除的value属性。

- include：表示需要包含的value属性。

screenWindow标签

表14screenWindow标签说明

属性名称含义数据类型是否可缺省policy标识条件属性的过滤规则。当前取值仅支持“include”。- include：表示需要包含的value属性。字符串该标签不可缺省。value单个字符串的取值格式为“宽 * 高”，取值为整数像素值，例如“454 * 454”。字符串数组该标签不可缺省。

标识条件属性的过滤规则。当前取值仅支持“include”。

screenDensity标签

表15screenDensity标签说明

属性名称含义数据类型是否可缺省policy标识条件属性的过滤规则。- exclude：表示需要排除的value属性。- include：表示需要包含的value属性。字符串该标签不可缺省。value标识屏幕的像素密度（dpi :Dot Per Inch）。支持的取值如下：- sdpi：表示小规模的屏幕密度（Small-scale Dots per Inch），适用于dpi取值为(0,120]的设备。- mdpi：表示中规模的屏幕密度（Medium-scale Dots Per Inch），适用于dpi取值为(120,160]的设备。- ldpi：表示大规模的屏幕密度（Large-scale Dots Per Inch），适用于dpi取值为(160,240]的设备。- xldpi：表示大规模的屏幕密度（Extra Large-scale Dots Per Inch），适用于dpi取值为(240,320]的设备。- xxldpi：表示大规模的屏幕密度（Extra Extra Large-scale Dots Per Inch），适用于dpi取值为(320，480]的设备。- xxxldpi：表示大规模的屏幕密度（Extra Extra Extra Large-scale Dots Per Inch），适用于dpi取值为(480, 640]的设备。字符串数组该标签不可缺省。

标识屏幕的像素密度（dpi :Dot Per Inch）。支持的取值如下：

- sdpi：表示小规模的屏幕密度（Small-scale Dots per Inch），适用于dpi取值为(0,120]的设备。

- mdpi：表示中规模的屏幕密度（Medium-scale Dots Per Inch），适用于dpi取值为(120,160]的设备。

- ldpi：表示大规模的屏幕密度（Large-scale Dots Per Inch），适用于dpi取值为(160,240]的设备。

- xldpi：表示大规模的屏幕密度（Extra Large-scale Dots Per Inch），适用于dpi取值为(240,320]的设备。

- xxldpi：表示大规模的屏幕密度（Extra Extra Large-scale Dots Per Inch），适用于dpi取值为(320，480]的设备。

- xxxldpi：表示大规模的屏幕密度（Extra Extra Extra Large-scale Dots Per Inch），适用于dpi取值为(480, 640]的设备。

countryCode标签

表16countryCode标签说明

属性名称含义数据类型是否可缺省policy标识条件属性的过滤规则。- exclude：表示需要排除的value属性。- include：表示需要包含的value属性。字符串该标签不可缺省。value标识应用需要分发的国家地区码。字符串数组该标签不可缺省。

示例如下：

在开发视图的resources/base/profile下面定义配置文件distributionFilter_config.json，文件名可以自定义。收起深色代码主题复制{"distributionFilter":{"screenShape":{"policy":"include","value":["circle","rect"]},"screenWindow":{"policy":"include","value":["454*454","466*466"]},"screenDensity":{"policy":"exclude","value":["ldpi","xldpi"]},"countryCode":{// 支持在中国分发"policy":"include","value":["CN"]}}}

在开发视图的resources/base/profile下面定义配置文件distributionFilter_config.json，文件名可以自定义。

收起深色代码主题复制{"distributionFilter":{"screenShape":{"policy":"include","value":["circle","rect"]},"screenWindow":{"policy":"include","value":["454*454","466*466"]},"screenDensity":{"policy":"exclude","value":["ldpi","xldpi"]},"countryCode":{// 支持在中国分发"policy":"include","value":["CN"]}}}

``` {"distributionFilter":{"screenShape":{"policy":"include","value":["circle","rect"]},"screenWindow":{"policy":"include","value":["454*454","466*466"]},"screenDensity":{"policy":"exclude","value":["ldpi","xldpi"]},"countryCode":{// 支持在中国分发"policy":"include","value":["CN"]}}} ```

"distributionFilter":{

"distributionFilter"

"screenShape":{

"screenShape"

"policy":"include",

"policy"

"include"

"value":[

"circle",

"circle"

"rect"

"screenWindow":{

"screenWindow"

"454*454",

"454*454"

"466*466"

"screenDensity":{

"screenDensity"

"policy":"exclude",

"exclude"

"ldpi",

"ldpi"

"xldpi"

"countryCode":{// 支持在中国分发

"countryCode"

// 支持在中国分发

"CN"

在module.json5配置文件的module标签中定义metadata信息。收起深色代码主题复制{"module":{// ..."metadata":[{"name":"ohos.module.distribution","resource":"$profile:distributionFilter_config",}]}}

在module.json5配置文件的module标签中定义metadata信息。

收起深色代码主题复制{"module":{// ..."metadata":[{"name":"ohos.module.distribution","resource":"$profile:distributionFilter_config",}]}}

``` {"module":{// ..."metadata":[{"name":"ohos.module.distribution","resource":"$profile:distributionFilter_config",}]}} ```

"name":"ohos.module.distribution",

"ohos.module.distribution"

"resource":"$profile:distributionFilter_config",

testRunner标签

此标签用于支持对测试框架的配置。

表17testRunner标签说明

属性名称含义数据类型是否可缺省name标识测试框架对象名称，取值为长度不超过255字节的字符串。字符串不可缺省。srcPath标识测试框架代码路径，取值为长度不超过255字节的字符串。字符串不可缺省。

testRunner标签示例：

收起深色代码主题复制{"module":{// ..."testRunner":{"name":"myTestRunnerName","srcPath":"etc/test/TestRunner.ts"}}}

``` {"module":{// ..."testRunner":{"name":"myTestRunnerName","srcPath":"etc/test/TestRunner.ts"}}} ```

"testRunner":{

"testRunner"

"name":"myTestRunnerName",

"myTestRunnerName"

"srcPath":"etc/test/TestRunner.ts"

"srcPath"

"etc/test/TestRunner.ts"

atomicService标签

此标签用于支持对元服务的配置。此标签仅在app.json中bundleType指定为atomicService时使能。

表18atomicService标签说明

属性名称含义数据类型是否可缺省preloads标识元服务中预加载列表。对象数组该标签可缺省，缺省值为空。

表19preloads标签说明

属性名称含义数据类型是否可缺省moduleName标识元服务中当前模块被加载时，需预加载的模块名。不能配置自身modulename，且必须有对应的模块，取值为长度不超过31字节的字符串。字符串该标签不可缺省。

atomicService标签示例：

收起深色代码主题复制{"module":{"atomicService":{"preloads":[{"moduleName":"feature"}]}}}

``` {"module":{"atomicService":{"preloads":[{"moduleName":"feature"}]}}} ```

"atomicService":{

"atomicService"

"preloads":[

"preloads"

"moduleName":"feature"

dependencies标签

此标签标识模块运行时依赖的共享库列表。

表20dependencies标签说明

属性名称含义数据类型是否可缺省bundleName标识当前模块依赖的共享包包名。取值为长度7~128字节的字符串。字符串该标签可缺省，缺省值为空。moduleName标识当前模块依赖的共享包模块名。取值为长度不超过31字节的字符串。字符串该标签不可缺省。versionCode标识当前共享包的版本号。取值范围为0~2147483647。数值该标签可缺省，缺省值为空。

dependencies标签示例：

收起深色代码主题复制{"module":{"dependencies":[{"bundleName":"com.share.library","moduleName":"library","versionCode":10001}]}}

``` {"module":{"dependencies":[{"bundleName":"com.share.library","moduleName":"library","versionCode":10001}]}} ```

"dependencies":[

"dependencies"

"bundleName":"com.share.library",

"com.share.library"

"moduleName":"library",

"library"

"versionCode":10001

"versionCode"

10001

proxyData标签

此标签标识模块提供的数据代理列表，仅限entry和feature配置。

表21proxyData标签说明

属性名称含义数据类型是否可缺省uri标识用于访问该数据代理的URI，不同的数据代理配置的URI不可重复，且需要满足datashareproxy://当前应用包名/xxx的格式。取值为长度不超过255字节的字符串。字符串该标签不可缺省。requiredReadPermission标识从该数据代理中读取数据所需要的权限，若不配置，则其他应用无法使用该代理。非系统应用配置的权限的等级需为system_basic或system_core，系统应用配置的权限的等级没有限制。权限等级可以参考权限列表。取值为长度不超过255字节的字符串。字符串该标签可缺省，缺省值为空。requiredWritePermission标识向该数据代理中写入数据所需要的权限，若不配置，则其他应用无法使用该代理。非系统应用配置的权限的等级需为system_basic或system_core，系统应用配置的权限的等级没有限制。权限等级可以参考权限列表。取值为长度不超过255字节的字符串。字符串该标签可缺省，缺省值为空。metadata标识该数据代理的元信息，只支持配置name和resource字段。对象该标签可缺省，缺省值为空。

proxyData标签示例：

收起深色代码主题复制{"module":{"proxyData":[{"uri":"datashareproxy://com.ohos.datashare/event/Meeting","requiredReadPermission":"ohos.permission.GET_BUNDLE_INFO","requiredWritePermission":"ohos.permission.GET_BUNDLE_INFO","metadata":{"name":"datashare_metadata","resource":"$profile:datashare"}}]}}

``` {"module":{"proxyData":[{"uri":"datashareproxy://com.ohos.datashare/event/Meeting","requiredReadPermission":"ohos.permission.GET_BUNDLE_INFO","requiredWritePermission":"ohos.permission.GET_BUNDLE_INFO","metadata":{"name":"datashare_metadata","resource":"$profile:datashare"}}]}} ```

"proxyData":[

"proxyData"

"uri":"datashareproxy://com.ohos.datashare/event/Meeting",

"datashareproxy://com.ohos.datashare/event/Meeting"

"requiredReadPermission":"ohos.permission.GET_BUNDLE_INFO",

"requiredReadPermission"

"ohos.permission.GET_BUNDLE_INFO"

"requiredWritePermission":"ohos.permission.GET_BUNDLE_INFO",

"requiredWritePermission"

"metadata":{

"name":"datashare_metadata",

"datashare_metadata"

"resource":"$profile:datashare"

"$profile:datashare"

routerMap标签

此标签标识模块配置的路由表的路径。

routerMap配置文件描述模块的路由表信息，routerMap标签值为数组类型。

表22routerMap标签说明

属性名称含义数据类型是否可缺省name标识跳转页面的名称。取值为长度不超过1023字节的字符串。字符串该标签不可缺省。pageSourceFile标识页面在模块内的路径。取值为长度不超过255字节的字符串。字符串该标签不可缺省。buildFunction标识被@Builder修饰的函数，该函数描述页面的UI。取值为长度不超过1023字节的字符串。字符串该标签不可缺省。data标识字符串类型的自定义数据。 每个自定义数据字符串取值不超过128字节。对象该标签可缺省，缺省值为空。customData标识任意类型的自定义数据，总长度不超过4096字节。对象该标签可缺省，缺省值为空。

在开发视图的resources/base/profile下面定义配置文件，文件名可以自定义，例如：router_map.json。收起深色代码主题复制{"routerMap":[{"name":"DynamicPage1","pageSourceFile":"src/main/ets/pages/pageOne.ets","buildFunction":"myFunction","customData":{"stringKey":"data1","numberKey":123,"booleanKey":true,"objectKey":{"name":"test"},"arrayKey":[{"id":123}]}},{"name":"DynamicPage2","pageSourceFile":"src/main/ets/pages/pageTwo.ets","buildFunction":"myBuilder","data":{"key1":"data1","key2":"data2"}}]}

在开发视图的resources/base/profile下面定义配置文件，文件名可以自定义，例如：router_map.json。

收起深色代码主题复制{"routerMap":[{"name":"DynamicPage1","pageSourceFile":"src/main/ets/pages/pageOne.ets","buildFunction":"myFunction","customData":{"stringKey":"data1","numberKey":123,"booleanKey":true,"objectKey":{"name":"test"},"arrayKey":[{"id":123}]}},{"name":"DynamicPage2","pageSourceFile":"src/main/ets/pages/pageTwo.ets","buildFunction":"myBuilder","data":{"key1":"data1","key2":"data2"}}]}

``` {"routerMap":[{"name":"DynamicPage1","pageSourceFile":"src/main/ets/pages/pageOne.ets","buildFunction":"myFunction","customData":{"stringKey":"data1","numberKey":123,"booleanKey":true,"objectKey":{"name":"test"},"arrayKey":[{"id":123}]}},{"name":"DynamicPage2","pageSourceFile":"src/main/ets/pages/pageTwo.ets","buildFunction":"myBuilder","data":{"key1":"data1","key2":"data2"}}]} ```

"routerMap":[

"routerMap"

"name":"DynamicPage1",

"DynamicPage1"

"pageSourceFile":"src/main/ets/pages/pageOne.ets",

"pageSourceFile"

"src/main/ets/pages/pageOne.ets"

"buildFunction":"myFunction",

"buildFunction"

"myFunction"

"customData":{

"customData"

"stringKey":"data1",

"stringKey"

"data1"

"numberKey":123,

"numberKey"

123

"booleanKey":true,

"booleanKey"

"objectKey":{

"objectKey"

"name":"test"

"test"

"arrayKey":[

"arrayKey"

"id":123

"id"

"name":"DynamicPage2",

"DynamicPage2"

"pageSourceFile":"src/main/ets/pages/pageTwo.ets",

"src/main/ets/pages/pageTwo.ets"

"buildFunction":"myBuilder",

"myBuilder"

"data":{

"data"

"key1":"data1",

"key1"

"key2":"data2"

"key2"

"data2"

在module.json5配置文件的module标签中定义routerMap字段，指向定义的路由表配置文件，例如："routerMap": "$profile:router_map"。

data标签

此标签用于支持在路由表中配置自定义的字符串数据。

收起深色代码主题复制{"routerMap":[{"name":"DynamicPage","pageSourceFile":"src/main/ets/pages/pageOne.ets","buildFunction":"myBuilder","data":{"key1":"data1","key2":"data2"}}]}

``` {"routerMap":[{"name":"DynamicPage","pageSourceFile":"src/main/ets/pages/pageOne.ets","buildFunction":"myBuilder","data":{"key1":"data1","key2":"data2"}}]} ```

"name":"DynamicPage",

"DynamicPage"

customData标签

此标签用于支持在路由表中配置自定义数据。

customData对象内部，可以填入任意类型的自定义数据。

customData标签示例：

收起深色代码主题复制{"routerMap":[{"name":"DynamicPage","pageSourceFile":"src/main/ets/pages/pageOne.ets","buildFunction":"myBuilder","customData":{"stringKey":"data1","numberKey":123,"booleanKey":true,"objectKey":{"name":"test"},"arrayKey":[{"id":123}]}}]}

``` {"routerMap":[{"name":"DynamicPage","pageSourceFile":"src/main/ets/pages/pageOne.ets","buildFunction":"myBuilder","customData":{"stringKey":"data1","numberKey":123,"booleanKey":true,"objectKey":{"name":"test"},"arrayKey":[{"id":123}]}}]} ```

appEnvironments标签

此标签标识模块配置的应用环境变量。

表23appEnvironments标签说明

属性名称含义数据类型是否可缺省name标识环境变量的变量名称。取值为长度不超过4096字节的字符串。字符串该标签可缺省，缺省值为空。value标识环境变量的值。取值为长度不超过4096字节的字符串。字符串该标签可缺省，缺省值为空。

appEnvironments标签示例：

收起深色代码主题复制{"module":{"appEnvironments":[{"name":"name1","value":"value1"}]}}

``` {"module":{"appEnvironments":[{"name":"name1","value":"value1"}]}} ```

"appEnvironments":[

"appEnvironments"

"name":"name1",

"name1"

"value":"value1"

"value1"

definePermissions标签

该标签仅支持系统资源hap定义权限，不支持应用自定义权限。权限定义方式参见系统资源权限定义。

表24definePermissions标签说明

属性名称含义数据类型是否可缺省name标识权限的名称，该标签最大长度为255字节。字符串不可缺省。grantMode标识权限的授予方式，支持如下两种授予模式如下：- system_grant：安装后系统自动授予该权限。- user_grant：使用时动态申请，用户授权后才可使用。字符串可缺省，缺省值为system_grant。availableLevel标识权限限制类别，可选值如下：- system_core：系统核心权限。- system_basic：系统基础权限。- normal：普通权限。所有应用允许申请的权限。字符串可缺省，缺省值为normal。provisionEnable标识权限是否支持证书方式申请权限，包括高级别的权限。配置为true标识开发者可以通过provision方式申请权限。布尔值可缺省，缺省值为true。distributedSceneEnabled标识权限是否支持分布式场景下使用该权限。布尔值可缺省，缺省值为false。label标识权限的简短描述，配置为对描述内容的资源索引。字符串可缺省，缺省值为空。description标识权限的详细描述，可以是字符串，或者是对描述内容的资源索引。字符串可缺省，缺省值为空。

标识权限的授予方式，支持如下两种授予模式如下：

- system_grant：安装后系统自动授予该权限。

- user_grant：使用时动态申请，用户授权后才可使用。

标识权限限制类别，可选值如下：

- system_core：系统核心权限。

- system_basic：系统基础权限。

- normal：普通权限。所有应用允许申请的权限。

definePermissions标签示例：

收起深色代码主题复制{"module":{"definePermissions":[{"name":"ohos.abilitydemo.permission.PROVIDER","grantMode":"system_grant","availableLevel":"system_core","provisionEnable":true,"distributedSceneEnable":false,"label":"$string:EntryAbility_label"}]}}

``` {"module":{"definePermissions":[{"name":"ohos.abilitydemo.permission.PROVIDER","grantMode":"system_grant","availableLevel":"system_core","provisionEnable":true,"distributedSceneEnable":false,"label":"$string:EntryAbility_label"}]}} ```

"definePermissions":[

"definePermissions"

"grantMode":"system_grant",

"grantMode"

"system_grant"

"availableLevel":"system_core",

"availableLevel"

"system_core"

"provisionEnable":true,

"provisionEnable"

"distributedSceneEnable":false,

"distributedSceneEnable"

"label":"$string:EntryAbility_label"

hnpPackages标签

该标签标识应用包含的Native软件包信息。

表25hnpPackages标签说明

属性名称含义数据类型是否可缺省package标识Native软件包名称。字符串该标签不可缺省。type标识Native软件包类型。支持的取值如下：- public：公有类型。- private：私有类型。字符串该标签不可缺省。

标识Native软件包类型。支持的取值如下：

- public：公有类型。

- private：私有类型。

hnpPackages示例：

收起深色代码主题复制{"module":{"hnpPackages":[{"package":"hnpsample.hnp","type":"public"}]}}

``` {"module":{"hnpPackages":[{"package":"hnpsample.hnp","type":"public"}]}} ```

"hnpPackages":[

"hnpPackages"

"package":"hnpsample.hnp",

"package"

"hnpsample.hnp"

"type":"public"

"public"

fileContextMenu标签

该标签用来标识当前HAP的右键菜单配置项，是一个profile文件资源，用于指定描述应用注册右键菜单配置文件。

fileContextMenu标签示例

收起深色代码主题复制{"module":{// ..."fileContextMenu":"$profile:menu"// 通过profile下的资源文件配置}}

``` {"module":{// ..."fileContextMenu":"$profile:menu"// 通过profile下的资源文件配置}} ```

"fileContextMenu":"$profile:menu"// 通过profile下的资源文件配置

"fileContextMenu"

"$profile:menu"

在开发视图的resources/base/profile下面定义配置文件menu.json，其中文件名“menu.json”可自定义，需要和fileContextMenu标签指定的信息对应。配置文件中描述了当前应用注册的右键菜单的项目和响应行为。

配置文件根节点名称为fileContextMenu，为对象数组，标识当前module注册右键菜单的数量。（单模块和单应用注册数量不能超过5个，配置超过数量当前只解析随机5个）

表26fileContextMenu标签配置说明

属性名称含义数据类型是否可缺省abilityName表示当前右键菜单对应的需要拉起的ability名称。字符串不可缺省menuItem右键菜单显示的信息。命名建议：原则一：[动作]+[应用名]，中文示例：用{App}打开、用{App} ({Plugin}插件) 打开；英文示例：Open with {App}、Open with {App} ({Plugin})。原则二：[动作]+[目的]，示例：压缩为{文件名}、压缩至{路径}、用{App}转换为{格式}。资源id不可缺省menuHandler一个ability可以创建多个右键菜单， 用该字段来区分用户拉起的不同右键菜单项。该字段在用户点击右键菜单执行时，会作为参数传递给右键菜单应用。字符串不可缺省menuContext定义展示该菜单项需要的上下文，可以支持多种情况，类型为数组。对象数组不可缺省

右键菜单显示的信息。命名建议：

原则一：[动作]+[应用名]，中文示例：用{App}打开、用{App} ({Plugin}插件) 打开；英文示例：Open with {App}、Open with {App} ({Plugin})。

原则二：[动作]+[目的]，示例：压缩为{文件名}、压缩至{路径}、用{App}转换为{格式}。

表27menuContext标签配置说明

属性名称含义数据类型是否可缺省menuKind表示单击如下类型时会触发右键菜单。取值范围如下：- 0：空白处- 1：文件- 2：文件夹- 3：文件和文件夹数值不可缺省menuRule表示采用什么方式选择文件或文件夹时，会触发右键菜单。取值范围如下：- single：单选- multi：多选- both：单选或多选字符串仅当menuKind为1或2时，才会读取该字段，此时不可缺省。fileSupportType表示当选中的文件列表里包含指定的文件类型时，显示右键菜单。当该字段取值为["*"]时，将会读取fileNotSupportType字段。当该字段取值为[]时，将不做任何处理。字符串数组仅当menuKind为1时，才会读取该字段，此时不可缺省。fileNotSupportType表示当选中的文件列表里包含这些文件类型时，不显示该右键菜单。仅当menuKind为1、且fileSupportType为["*"]时，才会读取该字段。字符串数组可缺省，缺省值为空。

表示单击如下类型时会触发右键菜单。取值范围如下：

- 0：空白处

- 1：文件

- 2：文件夹

- 3：文件和文件夹

表示采用什么方式选择文件或文件夹时，会触发右键菜单。取值范围如下：

- single：单选

- multi：多选

- both：单选或多选

表示当选中的文件列表里包含指定的文件类型时，显示右键菜单。

当该字段取值为["*"]时，将会读取fileNotSupportType字段。

当该字段取值为[]时，将不做任何处理。

表示当选中的文件列表里包含这些文件类型时，不显示该右键菜单。

仅当menuKind为1、且fileSupportType为["*"]时，才会读取该字段。

resources/base/profile路径下的menu.json资源文件示例如下：

收起深色代码主题复制{"fileContextMenu":[{"abilityName":"EntryAbility","menuItem":"$string:module_desc","menuHandler":"openCompress","menuContext":[{"menuKind":0},{"menuKind":1,"menuRule":"both","fileSupportType":[".rar",".zip"],"fileNotSupportType":[""]},{"menuKind":2,"menuRule":"single"},{"menuKind":3}]}]}

``` {"fileContextMenu":[{"abilityName":"EntryAbility","menuItem":"$string:module_desc","menuHandler":"openCompress","menuContext":[{"menuKind":0},{"menuKind":1,"menuRule":"both","fileSupportType":[".rar",".zip"],"fileNotSupportType":[""]},{"menuKind":2,"menuRule":"single"},{"menuKind":3}]}]} ```

"fileContextMenu":[

"menuItem":"$string:module_desc",

"menuItem"

"menuHandler":"openCompress",

"menuHandler"

"openCompress"

"menuContext":[

"menuContext"

"menuKind":0

"menuKind"

0

"menuKind":1,

1

"menuRule":"both",

"menuRule"

"both"

"fileSupportType":[

"fileSupportType"

".rar",

".rar"

".zip"

"fileNotSupportType":[

"fileNotSupportType"

"menuKind":2,

2

"menuRule":"single"

"single"

"menuKind":3

3

响应行为

应用进行右键扩展菜单注册后，在文件管理器通过右键操作拉起菜单，该菜单中会有“更多”选项。点击“更多”选项后，会出现注册后的menuItem列表，点击任意一个选项后，文件管理器默认通过startAbility的方式拉起三方应用，除了指定三方应用的包名和ability名之外，want中的parameter中，也会传入如下字段：

表28want中parameter字段说明

参数名值类型menuHandler对应注册配置文件中menuHandler的值。字符串uriList用户在具体文件上触发右键的uri值，如果空白处响应，此值为空，单个文件响应，数组长度1，多个文件响应则传入对应所有文件的uri值。字符串数组


==================================================
文件: markdown_content_20250423_211058.txt
==================================================

URL: https://developer.huawei.com/consumer/cn/doc/harmonyos-guides/integrated-hsp
爬取时间: 2025-04-23 21:10:58
来源: Huawei Developer


==================================================

URL: https://developer.huawei.com/consumer/cn/doc/harmonyos-guides/integrated-hsp
爬取时间: 2025-04-23 21:10:58
来源: Huawei Developer

使用场景

集团内部有多个应用，多个应用中都有一个相同的动态共享包。为了节约开发成本，实现代码和资源的共享，多个应用可以共享一个基建HSP(集成态HSP)。

约束限制

集成态HSP只支持Stage模型。

集成态HSP需要API12及以上版本，需要在工程级的build-profile.json5文件中，将useNormalizedOHMUrl字段设置为true。

开发使用说明

创建方-集成态HSP-工程配置：集成态HSP需要在工程级的build-profile.json5文件中，将useNormalizedOHMUrl字段设置为true。收起深色代码主题复制// created_party_project/build-profile.json5{"app":{"products":[{"name":"default","signingConfig":"default","compatibleSdkVersion":"5.0.0(12)","runtimeOS":"HarmonyOS","buildOption":{"strictMode":{"useNormalizedOHMUrl":true}}// ...}]// ...}}

创建方-集成态HSP-工程配置：集成态HSP需要在工程级的build-profile.json5文件中，将useNormalizedOHMUrl字段设置为true。

收起深色代码主题复制// created_party_project/build-profile.json5{"app":{"products":[{"name":"default","signingConfig":"default","compatibleSdkVersion":"5.0.0(12)","runtimeOS":"HarmonyOS","buildOption":{"strictMode":{"useNormalizedOHMUrl":true}}// ...}]// ...}}

收起深色代码主题复制

收起

深色代码主题复制

深色代码主题

复制

``` // created_party_project/build-profile.json5{"app":{"products":[{"name":"default","signingConfig":"default","compatibleSdkVersion":"5.0.0(12)","runtimeOS":"HarmonyOS","buildOption":{"strictMode":{"useNormalizedOHMUrl":true}}// ...}]// ...}} ```

// created_party_project/build-profile.json5

{

"app":{

"app"

:

"products":[

"products"

[

"name":"default",

"name"

"default"

,

"signingConfig":"default",

"signingConfig"

"compatibleSdkVersion":"5.0.0(12)",

"compatibleSdkVersion"

"5.0.0(12)"

"runtimeOS":"HarmonyOS",

"runtimeOS"

"HarmonyOS"

"buildOption":{

"buildOption"

"strictMode":{

"strictMode"

"useNormalizedOHMUrl":true

"useNormalizedOHMUrl"

true

}

// ...

]

创建方-集成态HSP-模块配置：修改模块级构建配置文件build-profile.json5，设置配置项integratedHsp为true，指定构建的HSP模块为集成态HSP。收起深色代码主题复制// created_party_project/library/build-profile.json5{"apiType":"stageMode","buildOption":{"arkOptions":{"integratedHsp":true}}}

创建方-集成态HSP-模块配置：修改模块级构建配置文件build-profile.json5，设置配置项integratedHsp为true，指定构建的HSP模块为集成态HSP。

收起深色代码主题复制// created_party_project/library/build-profile.json5{"apiType":"stageMode","buildOption":{"arkOptions":{"integratedHsp":true}}}

``` // created_party_project/library/build-profile.json5{"apiType":"stageMode","buildOption":{"arkOptions":{"integratedHsp":true}}} ```

// created_party_project/library/build-profile.json5

"apiType":"stageMode",

"apiType"

"stageMode"

"arkOptions":{

"arkOptions"

"integratedHsp":true

"integratedHsp"

创建方-集成态HSP-打包配置（tgz包）。(1) 配置项目签名信息，详见应用/服务签名；(2) 配置release模式；(3) 选择library目录，Build -> Make Module 'libray'。

创建方-集成态HSP-打包配置（tgz包）。

(1) 配置项目签名信息，详见应用/服务签名；

(2) 配置release模式；

(3) 选择library目录，Build -> Make Module 'libray'。

使用方-创建目录拷贝文件，在entry目录下新建libs目录，将集成态打包产物tgz包拷贝到libs目录下。

使用方-工程依赖配置：使用方主模块下oh-package.json5配置文件中添加依赖。收起深色代码主题复制// user_project/entry/oh-package.json5"dependencies":{"hsp":"./libs/library-default.tgz"}

使用方-工程依赖配置：使用方主模块下oh-package.json5配置文件中添加依赖。

收起深色代码主题复制// user_project/entry/oh-package.json5"dependencies":{"hsp":"./libs/library-default.tgz"}

``` // user_project/entry/oh-package.json5"dependencies":{"hsp":"./libs/library-default.tgz"} ```

// user_project/entry/oh-package.json5

"dependencies":{

"dependencies"

"hsp":"./libs/library-default.tgz"

"hsp"

"./libs/library-default.tgz"

使用方-工程配置：集成态HSP需要在工程级的build-profile.json5文件中，将useNormalizedOHMUrl字段设置为true。收起深色代码主题复制// user_project/build-profile.json5{"app":{"products":[{"name":"default","signingConfig":"default","compatibleSdkVersion":"5.0.0(12)","runtimeOS":"HarmonyOS","buildOption":{"strictMode":{"useNormalizedOHMUrl":true}}}]}}说明安装运行应用前，使用方工程必须配置项目签名信息，详见应用/服务签名。

使用方-工程配置：集成态HSP需要在工程级的build-profile.json5文件中，将useNormalizedOHMUrl字段设置为true。

收起深色代码主题复制// user_project/build-profile.json5{"app":{"products":[{"name":"default","signingConfig":"default","compatibleSdkVersion":"5.0.0(12)","runtimeOS":"HarmonyOS","buildOption":{"strictMode":{"useNormalizedOHMUrl":true}}}]}}

``` // user_project/build-profile.json5{"app":{"products":[{"name":"default","signingConfig":"default","compatibleSdkVersion":"5.0.0(12)","runtimeOS":"HarmonyOS","buildOption":{"strictMode":{"useNormalizedOHMUrl":true}}}]}} ```

// user_project/build-profile.json5

说明安装运行应用前，使用方工程必须配置项目签名信息，详见应用/服务签名。

说明

安装运行应用前，使用方工程必须配置项目签名信息，详见应用/服务签名。


==================================================
文件: markdown_content_20250423_211142.txt
==================================================

URL: https://developer.huawei.com/consumer/cn/doc/harmonyos-guides/har-to-hsp
爬取时间: 2025-04-23 21:11:42
来源: Huawei Developer


==================================================

URL: https://developer.huawei.com/consumer/cn/doc/harmonyos-guides/har-to-hsp
爬取时间: 2025-04-23 21:11:41
来源: Huawei Developer

HAR转HSP的操作步骤

修改HAR模块下的module.json5文件，修改type字段为shared，新增deliveryWithInstall和pages字段。收起深色代码主题复制// MyApplication\library\src\main\module.json5{"module":{"type":"shared","deliveryWithInstall":true,"pages":"$profile:main_pages"// ...}}

修改HAR模块下的module.json5文件，修改type字段为shared，新增deliveryWithInstall和pages字段。

收起深色代码主题复制// MyApplication\library\src\main\module.json5{"module":{"type":"shared","deliveryWithInstall":true,"pages":"$profile:main_pages"// ...}}

收起深色代码主题复制

收起

深色代码主题复制

深色代码主题

复制

``` // MyApplication\library\src\main\module.json5{"module":{"type":"shared","deliveryWithInstall":true,"pages":"$profile:main_pages"// ...}} ```

// MyApplication\library\src\main\module.json5

{

"module":{

"module"

:

"type":"shared",

"type"

"shared"

,

"deliveryWithInstall":true,

"deliveryWithInstall"

true

"pages":"$profile:main_pages"

"pages"

"$profile:main_pages"

// ...

}

在resources下的base，en_US和zh_CN的element下新增一个string字段shared_desc。收起深色代码主题复制// MyApplication\library\src\main\resources\base\element\string.json{"string":[{"name":"shared_desc","value":"description"}]}

在resources下的base，en_US和zh_CN的element下新增一个string字段shared_desc。

收起深色代码主题复制// MyApplication\library\src\main\resources\base\element\string.json{"string":[{"name":"shared_desc","value":"description"}]}

``` // MyApplication\library\src\main\resources\base\element\string.json{"string":[{"name":"shared_desc","value":"description"}]} ```

// MyApplication\library\src\main\resources\base\element\string.json

"string":[

"string"

[

"name":"shared_desc",

"name"

"shared_desc"

"value":"description"

"value"

"description"

]

在resources\base下新增profile文件夹，在profile下新增一个main_pages.json文件，并配置如下内容。收起深色代码主题复制// MyApplication\library\src\main\resources\base\profile\main_pages.json{"src":["pages/PageIndex"]}

在resources\base下新增profile文件夹，在profile下新增一个main_pages.json文件，并配置如下内容。

收起深色代码主题复制// MyApplication\library\src\main\resources\base\profile\main_pages.json{"src":["pages/PageIndex"]}

``` // MyApplication\library\src\main\resources\base\profile\main_pages.json{"src":["pages/PageIndex"]} ```

// MyApplication\library\src\main\resources\base\profile\main_pages.json

"src":[

"src"

"pages/PageIndex"

在ets目录下新增pages目录，并在pages目录下新增PageIndex.ets文件，并配置如下内容。收起深色代码主题复制// MyApplication\library\src\main\ets\pages\PageIndex.ets@Entry@ComponentstructPageIndex{@Statemessage:string='hello world';build() {Row() {Column() {Text(this.message).fontSize(50).fontWeight(FontWeight.Bold)}.width('100%')}.height('100%')}}

在ets目录下新增pages目录，并在pages目录下新增PageIndex.ets文件，并配置如下内容。

收起深色代码主题复制// MyApplication\library\src\main\ets\pages\PageIndex.ets@Entry@ComponentstructPageIndex{@Statemessage:string='hello world';build() {Row() {Column() {Text(this.message).fontSize(50).fontWeight(FontWeight.Bold)}.width('100%')}.height('100%')}}

``` // MyApplication\library\src\main\ets\pages\PageIndex.ets@Entry@ComponentstructPageIndex{@Statemessage:string='hello world';build() {Row() {Column() {Text(this.message).fontSize(50).fontWeight(FontWeight.Bold)}.width('100%')}.height('100%')}} ```

// MyApplication\library\src\main\ets\pages\PageIndex.ets

@Entry

@Component

structPageIndex{

PageIndex

@Statemessage:string='hello world';

@State

message

string

'hello world'

build() {

build

Row() {

Row

Column() {

Column

Text(this.message)

Text

this

.fontSize(50)

fontSize

50

.fontWeight(FontWeight.Bold)

fontWeight

FontWeight

Bold

.width('100%')

width

'100%'

.height('100%')

height

删除HAR模块的build-profile.json5文件中的consumerFiles字段配置。

修改HAR模块的hvigorfile.ts文件，将下面内容替换该文件内容。收起深色代码主题复制// MyApplication\library\hvigorfile.tsimport{ hspTasks }from'@ohos/hvigor-ohos-plugin';exportdefault{system: hspTasks,/* Built-in plugin of Hvigor. It cannot be modified. */plugins:[]/* Custom plugin to extend the functionality of Hvigor. */}

修改HAR模块的hvigorfile.ts文件，将下面内容替换该文件内容。

收起深色代码主题复制// MyApplication\library\hvigorfile.tsimport{ hspTasks }from'@ohos/hvigor-ohos-plugin';exportdefault{system: hspTasks,/* Built-in plugin of Hvigor. It cannot be modified. */plugins:[]/* Custom plugin to extend the functionality of Hvigor. */}

``` // MyApplication\library\hvigorfile.tsimport{ hspTasks }from'@ohos/hvigor-ohos-plugin';exportdefault{system: hspTasks,/* Built-in plugin of Hvigor. It cannot be modified. */plugins:[]/* Custom plugin to extend the functionality of Hvigor. */} ```

// MyApplication\library\hvigorfile.ts

import{ hspTasks }from'@ohos/hvigor-ohos-plugin';

import

from

'@ohos/hvigor-ohos-plugin'

exportdefault{

export

default

system: hspTasks,/* Built-in plugin of Hvigor. It cannot be modified. */

system

/* Built-in plugin of Hvigor. It cannot be modified. */

plugins:[]/* Custom plugin to extend the functionality of Hvigor. */

plugins

/* Custom plugin to extend the functionality of Hvigor. */

修改oh-package.json5文件，新增packageType配置。收起深色代码主题复制// MyApplication\library\oh-package.json5{"packageType":"InterfaceHar"}

修改oh-package.json5文件，新增packageType配置。

收起深色代码主题复制// MyApplication\library\oh-package.json5{"packageType":"InterfaceHar"}

``` // MyApplication\library\oh-package.json5{"packageType":"InterfaceHar"} ```

// MyApplication\library\oh-package.json5

"packageType":"InterfaceHar"

"packageType"

"InterfaceHar"

修改项目根目录下的配置文件build-profile.json5，在modules标签下找到library的配置，新增targets标签。收起深色代码主题复制// MyApplication\build-profile.json5"modules":[{"name":"library","srcPath":"./library","targets":[{"name":"default","applyToProducts":["default"]}]}]

修改项目根目录下的配置文件build-profile.json5，在modules标签下找到library的配置，新增targets标签。

收起深色代码主题复制// MyApplication\build-profile.json5"modules":[{"name":"library","srcPath":"./library","targets":[{"name":"default","applyToProducts":["default"]}]}]

``` // MyApplication\build-profile.json5"modules":[{"name":"library","srcPath":"./library","targets":[{"name":"default","applyToProducts":["default"]}]}] ```

// MyApplication\build-profile.json5

"modules":[

"modules"

"name":"library",

"library"

"srcPath":"./library",

"srcPath"

"./library"

"targets":[

"targets"

"name":"default",

"default"

"applyToProducts":[

"applyToProducts"


==================================================
文件: markdown_content_20250423_211238.txt
==================================================

URL: https://developer.huawei.com/consumer/cn/doc/harmonyos-guides/hsp-to-har
爬取时间: 2025-04-23 21:12:38
来源: Huawei Developer


==================================================

URL: https://developer.huawei.com/consumer/cn/doc/harmonyos-guides/hsp-to-har
爬取时间: 2025-04-23 21:12:37
来源: Huawei Developer

HSP转HAR的操作步骤

修改HSP模块下的module.json5文件，type字段值修改成har，删除deliveryWithInstall和pages字段。收起深色代码主题复制// MyApplication\library\src\main\module.json5{"module":{"name":"har","type":"har","deviceTypes":["default","tablet","2in1"]}}

修改HSP模块下的module.json5文件，type字段值修改成har，删除deliveryWithInstall和pages字段。

收起深色代码主题复制// MyApplication\library\src\main\module.json5{"module":{"name":"har","type":"har","deviceTypes":["default","tablet","2in1"]}}

收起深色代码主题复制

收起

深色代码主题复制

深色代码主题

复制

``` // MyApplication\library\src\main\module.json5{"module":{"name":"har","type":"har","deviceTypes":["default","tablet","2in1"]}} ```

// MyApplication\library\src\main\module.json5

{

"module":{

"module"

:

"name":"har",

"name"

"har"

,

"type":"har",

"type"

"deviceTypes":[

"deviceTypes"

[

"default",

"default"

"tablet",

"tablet"

"2in1"

]

}

在resource\base\profile文件夹下，删除main_pages.json文件。

修改HSP模块的hvigorfile.ts文件，将下面内容替换该文件内容。收起深色代码主题复制// MyApplication\library\hvigorfile.tsimport{ harTasks }from'@ohos/hvigor-ohos-plugin';exportdefault{system: harTasks,/* Built-in plugin of Hvigor. It cannot be modified. */plugins:[]/* Custom plugin to extend the functionality of Hvigor. */}

修改HSP模块的hvigorfile.ts文件，将下面内容替换该文件内容。

收起深色代码主题复制// MyApplication\library\hvigorfile.tsimport{ harTasks }from'@ohos/hvigor-ohos-plugin';exportdefault{system: harTasks,/* Built-in plugin of Hvigor. It cannot be modified. */plugins:[]/* Custom plugin to extend the functionality of Hvigor. */}

``` // MyApplication\library\hvigorfile.tsimport{ harTasks }from'@ohos/hvigor-ohos-plugin';exportdefault{system: harTasks,/* Built-in plugin of Hvigor. It cannot be modified. */plugins:[]/* Custom plugin to extend the functionality of Hvigor. */} ```

// MyApplication\library\hvigorfile.ts

import{ harTasks }from'@ohos/hvigor-ohos-plugin';

import

from

'@ohos/hvigor-ohos-plugin'

exportdefault{

export

default

system: harTasks,/* Built-in plugin of Hvigor. It cannot be modified. */

system

/* Built-in plugin of Hvigor. It cannot be modified. */

plugins:[]/* Custom plugin to extend the functionality of Hvigor. */

plugins

/* Custom plugin to extend the functionality of Hvigor. */

修改HSP模块的oh-package.json5文件，删除packageType配置。

修改项目级的配置文件build-profile.json5，在modules模块下找到HSP的配置信息，删除HSP配置下的targets。


==================================================
文件: markdown_content_20250423_211313.txt
==================================================

URL: https://developer.huawei.com/consumer/cn/doc/harmonyos-guides/typical-scenario-configuration
爬取时间: 2025-04-23 21:13:13
来源: Huawei Developer


==================================================

URL: https://developer.huawei.com/consumer/cn/doc/harmonyos-guides/typical-scenario-configuration
爬取时间: 2025-04-23 21:13:13
来源: Huawei Developer

配置方法

下面介绍在工程中配置静态快捷方式的方法。

配置快捷方式的配置文件。开发者若要配置静态快捷方式，可以在某个模块的/resources/base/profile/目录下配置快捷方式的配置文件，如shortcuts_config.json。收起深色代码主题复制{"shortcuts":[{"shortcutId":"id_test1",// 标识快捷方式，在应用有多个快捷方式时，该字段可作为快捷方式的唯一标识符"label":"$string:share",// 标识该快捷方式对外显示的文字"icon":"$media:share_icon",// 标识该快捷方式对外显示的图片"wants":[{"bundleName":"com.ohos.hello",// 对应该快捷方式对应拉起组件的包名"moduleName":"entry",// 对应该快捷方式对应拉起组件的模块名"abilityName":"EntryAbility",// 对应该快捷方式对应拉起组件的组件名"parameters":{"testKey":"testValue"// 表示拉起快捷方式时的自定义数据}}]}]}

配置快捷方式的配置文件。

开发者若要配置静态快捷方式，可以在某个模块的/resources/base/profile/目录下配置快捷方式的配置文件，如shortcuts_config.json。

收起深色代码主题复制{"shortcuts":[{"shortcutId":"id_test1",// 标识快捷方式，在应用有多个快捷方式时，该字段可作为快捷方式的唯一标识符"label":"$string:share",// 标识该快捷方式对外显示的文字"icon":"$media:share_icon",// 标识该快捷方式对外显示的图片"wants":[{"bundleName":"com.ohos.hello",// 对应该快捷方式对应拉起组件的包名"moduleName":"entry",// 对应该快捷方式对应拉起组件的模块名"abilityName":"EntryAbility",// 对应该快捷方式对应拉起组件的组件名"parameters":{"testKey":"testValue"// 表示拉起快捷方式时的自定义数据}}]}]}

收起深色代码主题复制

收起

深色代码主题复制

深色代码主题

复制

``` {"shortcuts":[{"shortcutId":"id_test1",// 标识快捷方式，在应用有多个快捷方式时，该字段可作为快捷方式的唯一标识符"label":"$string:share",// 标识该快捷方式对外显示的文字"icon":"$media:share_icon",// 标识该快捷方式对外显示的图片"wants":[{"bundleName":"com.ohos.hello",// 对应该快捷方式对应拉起组件的包名"moduleName":"entry",// 对应该快捷方式对应拉起组件的模块名"abilityName":"EntryAbility",// 对应该快捷方式对应拉起组件的组件名"parameters":{"testKey":"testValue"// 表示拉起快捷方式时的自定义数据}}]}]} ```

{

"shortcuts":[

"shortcuts"

:

[

"shortcutId":"id_test1",// 标识快捷方式，在应用有多个快捷方式时，该字段可作为快捷方式的唯一标识符

"shortcutId"

"id_test1"

,

// 标识快捷方式，在应用有多个快捷方式时，该字段可作为快捷方式的唯一标识符

"label":"$string:share",// 标识该快捷方式对外显示的文字

"label"

"$string:share"

// 标识该快捷方式对外显示的文字

"icon":"$media:share_icon",// 标识该快捷方式对外显示的图片

"icon"

"$media:share_icon"

// 标识该快捷方式对外显示的图片

"wants":[

"wants"

"bundleName":"com.ohos.hello",// 对应该快捷方式对应拉起组件的包名

"bundleName"

"com.ohos.hello"

// 对应该快捷方式对应拉起组件的包名

"moduleName":"entry",// 对应该快捷方式对应拉起组件的模块名

"moduleName"

"entry"

// 对应该快捷方式对应拉起组件的模块名

"abilityName":"EntryAbility",// 对应该快捷方式对应拉起组件的组件名

"abilityName"

"EntryAbility"

// 对应该快捷方式对应拉起组件的组件名

"parameters":{

"parameters"

"testKey":"testValue"// 表示拉起快捷方式时的自定义数据

"testKey"

"testValue"

// 表示拉起快捷方式时的自定义数据

}

]

在应用module.json5文件中配置metadata指向快捷方式的配置文件。收起深色代码主题复制{"module":{// ..."abilities":[{"name":"EntryAbility","srcEntry":"./ets/entryability/EntryAbility.ets",// ..."metadata":[{"name":"ohos.ability.shortcuts",// 配置快捷方式，该值固定为ohos.ability.shortcuts"resource":"$profile:shortcuts_config"// 指定shortcuts信息的资源位置}]}]}}

在应用module.json5文件中配置metadata指向快捷方式的配置文件。

收起深色代码主题复制{"module":{// ..."abilities":[{"name":"EntryAbility","srcEntry":"./ets/entryability/EntryAbility.ets",// ..."metadata":[{"name":"ohos.ability.shortcuts",// 配置快捷方式，该值固定为ohos.ability.shortcuts"resource":"$profile:shortcuts_config"// 指定shortcuts信息的资源位置}]}]}}

``` {"module":{// ..."abilities":[{"name":"EntryAbility","srcEntry":"./ets/entryability/EntryAbility.ets",// ..."metadata":[{"name":"ohos.ability.shortcuts",// 配置快捷方式，该值固定为ohos.ability.shortcuts"resource":"$profile:shortcuts_config"// 指定shortcuts信息的资源位置}]}]}} ```

"module":{

"module"

// ...

"abilities":[

"abilities"

"name":"EntryAbility",

"name"

"srcEntry":"./ets/entryability/EntryAbility.ets",

"srcEntry"

"./ets/entryability/EntryAbility.ets"

"metadata":[

"metadata"

"name":"ohos.ability.shortcuts",// 配置快捷方式，该值固定为ohos.ability.shortcuts

"ohos.ability.shortcuts"

// 配置快捷方式，该值固定为ohos.ability.shortcuts

"resource":"$profile:shortcuts_config"// 指定shortcuts信息的资源位置

"resource"

"$profile:shortcuts_config"

// 指定shortcuts信息的资源位置


==================================================
文件: markdown_content_20250423_211356.txt
==================================================

URL: https://developer.huawei.com/consumer/cn/doc/harmonyos-guides/app-clone
爬取时间: 2025-04-23 21:13:56
来源: Huawei Developer


==================================================

URL: https://developer.huawei.com/consumer/cn/doc/harmonyos-guides/app-clone
爬取时间: 2025-04-23 21:13:55
来源: Huawei Developer

约束与限制

输入法应用配置分身无效，无法创建应用分身。

应用分身的开发步骤

应用分身的配置方法。在工程项目中对AppScope/app.json5配置文件配置multiAppMode字段。具体配置如下：收起深色代码主题复制{"app":{"multiAppMode":{"multiAppModeType":"appClone","maxCount":2}}}

应用分身的配置方法。

在工程项目中对AppScope/app.json5配置文件配置multiAppMode字段。具体配置如下：

收起深色代码主题复制{"app":{"multiAppMode":{"multiAppModeType":"appClone","maxCount":2}}}

收起深色代码主题复制

收起

深色代码主题复制

深色代码主题

复制

``` {"app":{"multiAppMode":{"multiAppModeType":"appClone","maxCount":2}}} ```

{

"app":{

"app"

:

"multiAppMode":{

"multiAppMode"

"multiAppModeType":"appClone",

"multiAppModeType"

"appClone"

,

"maxCount":2

"maxCount"

2

}

创建分身应用。首先将已配置好的工程编译打包安装到设备上。然后打开设置>系统>应用分身，点击“创建分身”。最后返回到桌面查看是否创建成功。图中的三个应用都是独立的进程，运行、数据、通知等，都是彼此独立的。

创建分身应用。

首先将已配置好的工程编译打包安装到设备上。

然后打开设置>系统>应用分身，点击“创建分身”。

最后返回到桌面查看是否创建成功。图中的三个应用都是独立的进程，运行、数据、通知等，都是彼此独立的。

最后返回到桌面查看是否创建成功。

图中的三个应用都是独立的进程，运行、数据、通知等，都是彼此独立的。


==================================================
文件: markdown_content_20250423_211417.txt
==================================================

URL: https://developer.huawei.com/consumer/cn/doc/harmonyos-guides/multiinstance
爬取时间: 2025-04-23 21:14:17
来源: Huawei Developer


==================================================

URL: https://developer.huawei.com/consumer/cn/doc/harmonyos-guides/multiinstance
爬取时间: 2025-04-23 21:14:16
来源: Huawei Developer

约束限制

应用多实例仅支持2in1设备。

应用多实例的开发步骤

应用多实例的配置方法。在工程项目中对App/app.json5配置文件配置multiAppMode字段。具体配置如下：收起深色代码主题复制{"app":{"multiAppMode":{"multiAppModeType":"multiInstance","maxCount":5}}}

应用多实例的配置方法。

在工程项目中对App/app.json5配置文件配置multiAppMode字段。具体配置如下：

收起深色代码主题复制{"app":{"multiAppMode":{"multiAppModeType":"multiInstance","maxCount":5}}}

收起深色代码主题复制

收起

深色代码主题复制

深色代码主题

复制

``` {"app":{"multiAppMode":{"multiAppModeType":"multiInstance","maxCount":5}}} ```

{

"app":{

"app"

:

"multiAppMode":{

"multiAppMode"

"multiAppModeType":"multiInstance",

"multiAppModeType"

"multiInstance"

,

"maxCount":5

"maxCount"

5

}

创建应用多实例。

将已配置好的工程编译打包安装到设备上。

首次右击桌面应用图标打开一个应用进程，然后再次右击刚才打开的应用图标，选择“打开”。此时可以桌面会呈现同一个应用的两个应用进程页面。

首次右击桌面应用图标打开一个应用进程，然后再次右击刚才打开的应用图标，选择“打开”。

此时可以桌面会呈现同一个应用的两个应用进程页面。


==================================================
文件: markdown_content_20250423_211540.txt
==================================================

URL: https://developer.huawei.com/consumer/cn/doc/harmonyos-guides/multiinstance
爬取时间: 2025-04-23 21:15:40
来源: Huawei Developer


==================================================

URL: https://developer.huawei.com/consumer/cn/doc/harmonyos-guides/multiinstance
爬取时间: 2025-04-23 21:15:40
来源: Huawei Developer

约束限制

应用多实例仅支持2in1设备。

应用多实例的开发步骤

应用多实例的配置方法。在工程项目中对App/app.json5配置文件配置multiAppMode字段。具体配置如下：收起深色代码主题复制{"app":{"multiAppMode":{"multiAppModeType":"multiInstance","maxCount":5}}}

应用多实例的配置方法。

在工程项目中对App/app.json5配置文件配置multiAppMode字段。具体配置如下：

收起深色代码主题复制{"app":{"multiAppMode":{"multiAppModeType":"multiInstance","maxCount":5}}}

收起深色代码主题复制

收起

深色代码主题复制

深色代码主题

复制

``` {"app":{"multiAppMode":{"multiAppModeType":"multiInstance","maxCount":5}}} ```

{

"app":{

"app"

:

"multiAppMode":{

"multiAppMode"

"multiAppModeType":"multiInstance",

"multiAppModeType"

"multiInstance"

,

"maxCount":5

"maxCount"

5

}

创建应用多实例。

将已配置好的工程编译打包安装到设备上。

首次右击桌面应用图标打开一个应用进程，然后再次右击刚才打开的应用图标，选择“打开”。此时可以桌面会呈现同一个应用的两个应用进程页面。

首次右击桌面应用图标打开一个应用进程，然后再次右击刚才打开的应用图标，选择“打开”。

此时可以桌面会呈现同一个应用的两个应用进程页面。


==================================================
文件: markdown_content_20250423_211650.txt
==================================================

URL: https://developer.huawei.com/consumer/cn/doc/harmonyos-guides/layered-image
爬取时间: 2025-04-23 21:16:50
来源: Huawei Developer


==================================================

URL: https://developer.huawei.com/consumer/cn/doc/harmonyos-guides/layered-image
爬取时间: 2025-04-23 21:16:50
来源: Huawei Developer

配置步骤

将前景资源和背景资源文件放在“AppScope\resources\base\media”文件下。本例中采用的前景资源和背景资源的文件名分别为“foreground.png”和"background.png"。

将前景资源和背景资源文件放在“AppScope\resources\base\media”文件下。

本例中采用的前景资源和背景资源的文件名分别为“foreground.png”和"background.png"。

在“AppScope\resources\base\media”文件夹下创建layered_image.json文件，并在该文件中配置分层图标的前景资源与背景资源信息。收起深色代码主题复制{"layered-image":{"background":"$media:background","foreground":"$media:foreground"}}

收起深色代码主题复制{"layered-image":{"background":"$media:background","foreground":"$media:foreground"}}

收起深色代码主题复制

收起

深色代码主题复制

深色代码主题

复制

``` {"layered-image":{"background":"$media:background","foreground":"$media:foreground"}} ```

{

"layered-image":

"layered-image"

:

"background":"$media:background",

"background"

"$media:background"

,

"foreground":"$media:foreground"

"foreground"

"$media:foreground"

}

在app.json5配置文件中引用分层图标资源文件。示例如下：收起深色代码主题复制{"app":{"icon":"$media:layered_image",// ...}}

收起深色代码主题复制{"app":{"icon":"$media:layered_image",// ...}}

``` {"app":{"icon":"$media:layered_image",// ...}} ```

"app":{

"app"

"icon":"$media:layered_image",

"icon"

"$media:layered_image"

// ...


==================================================
文件: markdown_content_20250423_211735.txt
==================================================

URL: https://developer.huawei.com/consumer/cn/doc/harmonyos-guides/resource-categories-and-access
爬取时间: 2025-04-23 21:17:35
来源: Huawei Developer


==================================================

URL: https://developer.huawei.com/consumer/cn/doc/harmonyos-guides/resource-categories-and-access
爬取时间: 2025-04-23 21:17:35
来源: Huawei Developer

资源分类

应用开发中使用的各类资源文件，需要放入特定子目录中存储管理。资源目录的示例如下所示，base目录、限定词目录、rawfile目录、resfile目录称为资源目录，element、media、profile称为资源组目录。

说明stage模型多工程情况下，共有的资源文件放到AppScope下的resources目录。

说明

stage模型多工程情况下，共有的资源文件放到AppScope下的resources目录。

资源目录示例：

收起深色代码主题复制resources|---base // 默认存在的目录| |---element| | |---string.json| |---media| | |---icon.png| |---profile| | |---test_profile.json|---en_GB-vertical-car-mdpi // 自定义限定词目录示例，由开发者创建| |---element| | |---string.json| |---media| | |---icon.png| |---profile| | |---test_profile.json|---rawfile // 其他类型文件，原始文件形式保存，不会被集成到resources.index文件中。文件名可自定义。|---resfile // 其他类型文件，原始文件形式保存，不会被集成到resources.index文件中。文件名可自定义。

收起深色代码主题复制

收起

深色代码主题复制

深色代码主题

复制

``` resources|---base // 默认存在的目录| |---element| | |---string.json| |---media| | |---icon.png| |---profile| | |---test_profile.json|---en_GB-vertical-car-mdpi // 自定义限定词目录示例，由开发者创建| |---element| | |---string.json| |---media| | |---icon.png| |---profile| | |---test_profile.json|---rawfile // 其他类型文件，原始文件形式保存，不会被集成到resources.index文件中。文件名可自定义。|---resfile // 其他类型文件，原始文件形式保存，不会被集成到resources.index文件中。文件名可自定义。 ```

resources

|---base // 默认存在的目录

---base // 默认存在的目录

| |---element

---element

| | |---string.json

---string.json

| |---media

---media

| | |---icon.png

---icon.png

| |---profile

---profile

| | |---test_profile.json

---test_profile.json

|---en_GB-vertical-car-mdpi // 自定义限定词目录示例，由开发者创建

---en_GB-vertical-car-mdpi // 自定义限定词目录示例，由开发者创建

|---rawfile // 其他类型文件，原始文件形式保存，不会被集成到resources.index文件中。文件名可自定义。

---rawfile // 其他类型文件，原始文件形式保存，不会被集成到resources.index文件中。文件名可自定义。

|---resfile // 其他类型文件，原始文件形式保存，不会被集成到resources.index文件中。文件名可自定义。

---resfile // 其他类型文件，原始文件形式保存，不会被集成到resources.index文件中。文件名可自定义。

资源目录

资源组目录

资源组目录包括element、media、profile三种类型的资源文件，用于存放特定类型资源。

表3 资源组目录说明

目录类型说明资源文件element表示元素资源，以下每一类数据都采用相应的JSON文件来表征（目录下仅支持文件类型）。- boolean，布尔型- color，颜色- float，浮点型，范围是-2^128-2^128- intarray，整型数组- integer，整型，范围是-2^31-2^31-1- plural，复数形式- strarray，字符串数组- string，字符串，格式化字符串请参考API文档element目录中的文件名称建议与下面的文件名保持一致。每个文件中只能包含同一类型的数据。- boolean.json- color.json- float.json- intarray.json- integer.json- plural.json- strarray.json- string.jsonmedia表示媒体资源，包括图片、音频、视频等非文本格式的文件（目录下只支持文件类型）。图片和音视频的类型说明见表4和表5。文件名可自定义，例如：icon.png。profile表示自定义配置文件，其文件内容可通过包管理接口获取（目录下只支持json文件类型）。文件名可自定义，例如：test_profile.json。

表示元素资源，以下每一类数据都采用相应的JSON文件来表征（目录下仅支持文件类型）。

- boolean，布尔型

- color，颜色

- float，浮点型，范围是-2^128-2^128

- intarray，整型数组

- integer，整型，范围是-2^31-2^31-1

- plural，复数形式

- strarray，字符串数组

- string，字符串，格式化字符串请参考API文档

element目录中的文件名称建议与下面的文件名保持一致。每个文件中只能包含同一类型的数据。

- boolean.json

- color.json

- float.json

- intarray.json

- integer.json

- plural.json

- strarray.json

- string.json

表示媒体资源，包括图片、音频、视频等非文本格式的文件（目录下只支持文件类型）。

图片和音视频的类型说明见表4和表5。

媒体资源类型说明

表4 图片资源类型说明

格式文件后缀名JPEG.jpgPNG.pngGIF.gifSVG.svgWEBP.webpBMP.bmp

表5 音视频资源类型说明

格式支持的文件类型H.264 AVC.3gpBaseline Profile (BP).mp4

资源文件示例

color.json文件的内容如下：

标准的十六进制颜色值由六位十六进制数字组成，下面的value值前两位表示透明度，后六位表示颜色值。

收起深色代码主题复制{"color":[{"name":"color_hello","value":"#ffff0000"},{"name":"color_world","value":"#ff0000ff"}]}

``` {"color":[{"name":"color_hello","value":"#ffff0000"},{"name":"color_world","value":"#ff0000ff"}]} ```

{

"color":[

"color"

:

[

"name":"color_hello",

"name"

"color_hello"

,

"value":"#ffff0000"

"value"

"#ffff0000"

},

}

"name":"color_world",

"color_world"

"value":"#ff0000ff"

"#ff0000ff"

]

float.json文件的内容如下：

收起深色代码主题复制{"float":[{"name":"font_hello","value":"28.0fp"},{"name":"font_world","value":"20.0fp"}]}

``` {"float":[{"name":"font_hello","value":"28.0fp"},{"name":"font_world","value":"20.0fp"}]} ```

"float":[

"float"

"name":"font_hello",

"font_hello"

"value":"28.0fp"

"28.0fp"

"name":"font_world",

"font_world"

"value":"20.0fp"

"20.0fp"

string.json文件的内容如下：

收起深色代码主题复制{"string":[{"name":"string_hello","value":"Hello"},{"name":"string_world","value":"World"},{"name":"message_arrive","value":"We will arrive at %1$s."},{"name":"message_notification","value":"Hello, %1$s!,You have %2$d new messages."}]}

``` {"string":[{"name":"string_hello","value":"Hello"},{"name":"string_world","value":"World"},{"name":"message_arrive","value":"We will arrive at %1$s."},{"name":"message_notification","value":"Hello, %1$s!,You have %2$d new messages."}]} ```

"string":[

"string"

"name":"string_hello",

"string_hello"

"value":"Hello"

"Hello"

"name":"string_world",

"string_world"

"value":"World"

"World"

"name":"message_arrive",

"message_arrive"

"value":"We will arrive at %1$s."

"We will arrive at %1$s."

"name":"message_notification",

"message_notification"

"value":"Hello, %1$s!,You have %2$d new messages."

"Hello, %1$s!,You have %2$d new messages."

plural.json文件的内容如下：

收起深色代码主题复制{"plural":[{"name":"eat_apple","value":[{"quantity":"one","value":"%d apple"},{"quantity":"other","value":"%d apples"}]}]}

``` {"plural":[{"name":"eat_apple","value":[{"quantity":"one","value":"%d apple"},{"quantity":"other","value":"%d apples"}]}]} ```

"plural":[

"plural"

"name":"eat_apple",

"eat_apple"

"value":[

"quantity":"one",

"quantity"

"one"

"value":"%d apple"

"%d apple"

"quantity":"other",

"other"

"value":"%d apples"

"%d apples"

创建资源目录和资源文件

在resources目录下，可按照限定词目录命名规则，以及资源组目录支持的文件类型，创建资源目录和资源组目录，添加特定类型资源。DevEco Studio支持同时创建资源目录和资源文件，也支持单独创建资源目录或资源文件。

在resources目录右键菜单选择“New > Resource File”，可同时创建资源目录和资源文件，文件默认创建在base目录的对应资源组。如果选择了限定词，则会按照命名规范自动生成限定词和资源组目录，并将文件创建在限定词目录中。

图中File name为需要创建的文件名。Resource type为资源组类型，默认是element。Root Element为资源类型。Avaliable qualifiers为供选择的限定词目录，通过右边的小箭头可添加或者删除。

创建的目录名自动生成，格式固定为“限定词.资源组”，例如：创建一个限定词为dark的element目录，自动生成的目录名称为“dark/element”。

创建资源目录

在resources目录右键菜单选择“New > Resource Directory”，可创建资源目录，默认创建的是base目录。如果选择了限定词，则会按照命名规范自动生成限定词和资源组目录。确定限定词后，选择资源组类型，当前资源组类型支持Element、Media、Profile三种，创建后生成资源目录。

创建资源文件

在资源目录（element、media、profile）的右键菜单选择“New > XXX Resource File”，即可创建对应资源组目录的资源文件。例如，在element目录下可新建Element Resource File。

资源可翻译特性

功能介绍

当应用引用的字符串资源需要支持国际化多语言翻译时，可使用attr属性标记字符串翻译范围和翻译状态。attr属性不参与资源编译，只标记字符串是否翻译。

未配置attr属性，默认需要翻译。

attr支持属性

名称类型说明translatableboolean标记字符串是否需要翻译。true：需要翻译。false：不需要翻译。prioritystring标记字符串翻译状态。code：未翻译。translate：翻译未验证。LT：翻译已验证。customer：用户定制字符串。

标记字符串是否需要翻译。

true：需要翻译。

false：不需要翻译。

标记字符串翻译状态。

code：未翻译。

translate：翻译未验证。

LT：翻译已验证。

customer：用户定制字符串。

使用约束

可翻译特性使能范围：base目录下string、strarray、plural类型资源。

收起深色代码主题复制resources|---base| |---element| | |---string.json| | |---strarray.json| | |---plural.json

``` resources|---base| |---element| | |---string.json| | |---strarray.json| | |---plural.json ```

|---base

---base

| | |---strarray.json

---strarray.json

| | |---plural.json

---plural.json

示例

string资源配置attr属性示例如下，其中string1字符串被标记为不需要翻译，string2字符串被标记为需要翻译且翻译已验证。

收起深色代码主题复制{"string":[{"name":"string1","value":"1","attr":{"translatable":false}},{"name":"string2","value":"Hello world!","attr":{"translatable":true,"priority":"LT"}}]}

``` {"string":[{"name":"string1","value":"1","attr":{"translatable":false}},{"name":"string2","value":"Hello world!","attr":{"translatable":true,"priority":"LT"}}]} ```

"name":"string1",

"string1"

"value":"1",

"1"

"attr":{

"attr"

"translatable":false

"translatable"

false

"name":"string2",

"string2"

"value":"Hello world!",

"Hello world!"

"translatable":true,

true

"priority":"LT"

"priority"

"LT"

资源访问

单HAP包应用资源

通过$r或$rawfile访问资源。对于color、float、string、plural、media、profile等类型的资源，通过$r('app.type.name')形式访问。其中，app为resources目录中定义的资源；type为资源类型；name为资源名，开发者定义资源时确定。对于string.json中使用多个占位符的情况，通过$r('app.string.label','aaa','bbb',444)形式访问。对于rawfile目录资源，通过"$rawfile('filename')"形式访问。其中，filename为rawfile目录下文件的相对路径，文件名需要包含后缀，路径开头不可以"/"开头。说明rawfile的native的访问方式请参考Rawfile开发指导。

通过$r或$rawfile访问资源。

对于color、float、string、plural、media、profile等类型的资源，通过$r('app.type.name')形式访问。其中，app为resources目录中定义的资源；type为资源类型；name为资源名，开发者定义资源时确定。

对于string.json中使用多个占位符的情况，通过$r('app.string.label','aaa','bbb',444)形式访问。

对于rawfile目录资源，通过"$rawfile('filename')"形式访问。其中，filename为rawfile目录下文件的相对路径，文件名需要包含后缀，路径开头不可以"/"开头。

说明rawfile的native的访问方式请参考Rawfile开发指导。

rawfile的native的访问方式请参考Rawfile开发指导。

资源组目录下的“资源文件示例”显示了.json文件内容，包含color.json文件、string.json文件和plural.json文件，访问应用资源时需先了解.json文件的使用规范。

资源的具体使用方法如下：

收起深色代码主题复制//通过$r('app.type.name')访问Text($r('app.string.string_hello')).fontColor($r('app.color.color_emphasize')).fontSize($r('app.float.text_size_headline1')).fontFamily($r('app.string.font_family_medium')).backgroundColor($r('app.color.color_palette_aux1'))Image($r('app.media.app_icon')).border({color: $r('app.color.color_palette_aux1'),radius: $r('app.float.corner_radius_button'),width:2}).margin({top: $r('app.float.elements_margin_horizontal_m'),bottom: $r('app.float.elements_margin_horizontal_l')}).height(200).width(300)//对占位符，通过$r('app.string.label','aaa','bbb',444)访问Text($r('app.string.message_notification','LiHua',2))

``` //通过$r('app.type.name')访问Text($r('app.string.string_hello')).fontColor($r('app.color.color_emphasize')).fontSize($r('app.float.text_size_headline1')).fontFamily($r('app.string.font_family_medium')).backgroundColor($r('app.color.color_palette_aux1'))Image($r('app.media.app_icon')).border({color: $r('app.color.color_palette_aux1'),radius: $r('app.float.corner_radius_button'),width:2}).margin({top: $r('app.float.elements_margin_horizontal_m'),bottom: $r('app.float.elements_margin_horizontal_l')}).height(200).width(300)//对占位符，通过$r('app.string.label','aaa','bbb',444)访问Text($r('app.string.message_notification','LiHua',2)) ```

//通过$r('app.type.name')访问

Text($r('app.string.string_hello'))

Text

'app.string.string_hello'

.fontColor($r('app.color.color_emphasize'))

fontColor

'app.color.color_emphasize'

.fontSize($r('app.float.text_size_headline1'))

fontSize

'app.float.text_size_headline1'

.fontFamily($r('app.string.font_family_medium'))

fontFamily

'app.string.font_family_medium'

.backgroundColor($r('app.color.color_palette_aux1'))

backgroundColor

'app.color.color_palette_aux1'

Image($r('app.media.app_icon'))

Image

'app.media.app_icon'

.border({

border

color: $r('app.color.color_palette_aux1'),

color

radius: $r('app.float.corner_radius_button'),width:2

radius

'app.float.corner_radius_button'

width

2

})

.margin({

margin

top: $r('app.float.elements_margin_horizontal_m'),

top

'app.float.elements_margin_horizontal_m'

bottom: $r('app.float.elements_margin_horizontal_l')

bottom

'app.float.elements_margin_horizontal_l'

.height(200)

height

200

.width(300)

300

//对占位符，通过$r('app.string.label','aaa','bbb',444)访问

Text($r('app.string.message_notification','LiHua',2))

'app.string.message_notification'

'LiHua'

通过本应用上下文获取ResourceManager后，调用不同资源管理接口访问不同资源。例如：getContext().resourceManager.getStringByNameSync('test') 可获取字符串资源；getContext().resourceManager.getRawFd('rawfilepath') 可获取Rawfile所在hap包的descriptor信息，访问rawfile文件时需{fd, offset, length}一起使用。

通过本应用上下文获取ResourceManager后，调用不同资源管理接口访问不同资源。

例如：getContext().resourceManager.getStringByNameSync('test') 可获取字符串资源；getContext().resourceManager.getRawFd('rawfilepath') 可获取Rawfile所在hap包的descriptor信息，访问rawfile文件时需{fd, offset, length}一起使用。

跨HAP/HSP包应用资源

系统资源

开发者可以在应用UX设计关于资源的介绍，获取支持的色彩、字体等系统资源ID及其在不同配置下的取值；在主题图标库获取支持的图标资源，获取到图标资源后可通过SymbolGlyph对图标颜色等进一步设置。

对于系统资源，可以通过“$r('sys.type.resource_name')”的形式访问。其中，sys表示系统资源；type为资源类型，取值包括“color”、“float”、“string”、“media”、“symbol”；resource_name为资源名称。

说明仅声明式开发范式支持使用系统资源。对于系统预置应用，建议使用系统资源；对于三方应用，可以根据需要选择使用系统资源或自定义应用资源。当前，界面加载的系统资源字体进行显示时（可以在配置中system/etc/fontconfig.json文件中查看），默认使用的字体是鸿蒙黑体（HarmonyOS Sans），支持的范围是中文编码字符集GB18030-2022（级别一/级别二）。

仅声明式开发范式支持使用系统资源。对于系统预置应用，建议使用系统资源；对于三方应用，可以根据需要选择使用系统资源或自定义应用资源。当前，界面加载的系统资源字体进行显示时（可以在配置中system/etc/fontconfig.json文件中查看），默认使用的字体是鸿蒙黑体（HarmonyOS Sans），支持的范围是中文编码字符集GB18030-2022（级别一/级别二）。

仅声明式开发范式支持使用系统资源。

对于系统预置应用，建议使用系统资源；对于三方应用，可以根据需要选择使用系统资源或自定义应用资源。

当前，界面加载的系统资源字体进行显示时（可以在配置中system/etc/fontconfig.json文件中查看），默认使用的字体是鸿蒙黑体（HarmonyOS Sans），支持的范围是中文编码字符集GB18030-2022（级别一/级别二）。

收起深色代码主题复制Text('Hello').fontColor($r('sys.color.ohos_id_color_emphasize')).fontSize($r('sys.float.ohos_id_text_size_headline1')).fontFamily($r('sys.string.ohos_id_text_font_family_medium')).backgroundColor($r('sys.color.ohos_id_color_palette_aux1'))Image($r('sys.media.ohos_app_icon')).border({color: $r('sys.color.ohos_id_color_palette_aux1'),radius: $r('sys.float.ohos_id_corner_radius_button'),width:2}).margin({top: $r('sys.float.ohos_id_elements_margin_horizontal_m'),bottom: $r('sys.float.ohos_id_elements_margin_horizontal_l')}).height(200).width(300)

``` Text('Hello').fontColor($r('sys.color.ohos_id_color_emphasize')).fontSize($r('sys.float.ohos_id_text_size_headline1')).fontFamily($r('sys.string.ohos_id_text_font_family_medium')).backgroundColor($r('sys.color.ohos_id_color_palette_aux1'))Image($r('sys.media.ohos_app_icon')).border({color: $r('sys.color.ohos_id_color_palette_aux1'),radius: $r('sys.float.ohos_id_corner_radius_button'),width:2}).margin({top: $r('sys.float.ohos_id_elements_margin_horizontal_m'),bottom: $r('sys.float.ohos_id_elements_margin_horizontal_l')}).height(200).width(300) ```

Text('Hello')

'Hello'

.fontColor($r('sys.color.ohos_id_color_emphasize'))

'sys.color.ohos_id_color_emphasize'

.fontSize($r('sys.float.ohos_id_text_size_headline1'))

'sys.float.ohos_id_text_size_headline1'

.fontFamily($r('sys.string.ohos_id_text_font_family_medium'))

'sys.string.ohos_id_text_font_family_medium'

.backgroundColor($r('sys.color.ohos_id_color_palette_aux1'))

'sys.color.ohos_id_color_palette_aux1'

Image($r('sys.media.ohos_app_icon'))

'sys.media.ohos_app_icon'

color: $r('sys.color.ohos_id_color_palette_aux1'),

radius: $r('sys.float.ohos_id_corner_radius_button'),width:2

'sys.float.ohos_id_corner_radius_button'

top: $r('sys.float.ohos_id_elements_margin_horizontal_m'),

'sys.float.ohos_id_elements_margin_horizontal_m'

bottom: $r('sys.float.ohos_id_elements_margin_horizontal_l')

'sys.float.ohos_id_elements_margin_horizontal_l'

资源匹配

应用使用某资源时，系统会根据当前设备状态优先从相匹配的限定词目录中寻找该资源。只有当resources目录中没有与设备状态匹配的限定词目录，或者在限定词目录中找不到该资源时，才会去base目录中查找。rawfile是原始文件目录，不会根据设备状态去匹配不同的资源。

限定词目录与设备状态的匹配规则

在为设备匹配对应的资源文件时，限定词目录匹配的优先级从高到低依次为：移动国家码和移动网络码 > 区域（可选组合：语言、语言_文字、语言_国家或地区、语言_文字_国家或地区）> 横竖屏 > 设备类型 > 颜色模式 > 屏幕密度。

如果限定词目录中包含移动国家码和移动网络码、语言、文字、横竖屏、设备类型、颜色模式限定词，则对应限定词的取值必须与当前的设备状态完全一致，该目录才能够参与设备的资源匹配。例如，限定词目录“zh_CN-car-ldpi”不能参与“en_US”设备的资源匹配。

如果存在多个屏幕密度限定词目录，则优先向上匹配最接近的屏幕密度限定词目录，否则向下匹配最为接近的屏幕密度限定词目录。例如，假设存在限定词目录“xldpi”和“xxldpi”，设备屏幕密度为“xxldpi”，则会匹配“xxldpi”限定词目录。

应用界面加载资源规则，更多请参考国际化和本地化文档。

获取指定配置的资源

overlay机制

overlay是一种资源替换机制，针对不同品牌、产品的显示风格，开发者可以在不重新打包业务逻辑hap的情况下，通过配置和使用overlay资源包，实现应用界面风格变换。overlay资源包只包含资源文件、资源索引文件和配置文件。

动态overlay使用方式

1、对应的overlay资源包需要放在对应应用安装路径下，通过hdc install的方式安装。如应用com.example.overlay的安装路径：data/app/el1/bundle/public/com.example.overlay/。

2、应用通过addResource(path)，实现资源覆盖；通过removeResource(path)，实现overlay删除。overlay资源路径需经过元能力的getContext().bundleCodeDir获取此应用对应的沙箱根目录，由应用的沙箱根目录+overlay资源包名称组成。如：let path = getContext().bundleCodeDir + "overlay资源包名称"，其对应沙箱路径为：/data/storage/el1/bundle/overlay资源包名称。

静态overlay配置方式

包内overlay资源包中的配置文件app.json5中支持的字段：

收起深色代码主题复制"app":{"bundleName":"com.example.myapplication.overlay","vendor":"example","versionCode":"1000000","versionName":"1.0.0.1","icon":"$media:app_icon","label":"$string:app_name",}}

``` "app":{"bundleName":"com.example.myapplication.overlay","vendor":"example","versionCode":"1000000","versionName":"1.0.0.1","icon":"$media:app_icon","label":"$string:app_name",}} ```

"app":{

"app"

"bundleName":"com.example.myapplication.overlay",

"bundleName"

"com.example.myapplication.overlay"

"vendor":"example",

"vendor"

"example"

"versionCode":"1000000",

"versionCode"

"1000000"

"versionName":"1.0.0.1",

"versionName"

"1.0.0.1"

"icon":"$media:app_icon",

"icon"

"$media:app_icon"

"label":"$string:app_name",

"label"

"$string:app_name"

包内overlay资源包中的配置文件module.json5中支持的字段：

收起深色代码主题复制"module":{"name":"entry_overlay_module_name","type":"shared","description":"$string:entry_overlay_desc","deviceTypes": ["default","tablet",],"deliverywithInstall":true,"targetModuleName":"entry_module_name","targetPriority":1,}}

``` "module":{"name":"entry_overlay_module_name","type":"shared","description":"$string:entry_overlay_desc","deviceTypes": ["default","tablet",],"deliverywithInstall":true,"targetModuleName":"entry_module_name","targetPriority":1,}} ```

"module":{

"module"

"name":"entry_overlay_module_name",

"entry_overlay_module_name"

"type":"shared",

"type"

"shared"

"description":"$string:entry_overlay_desc",

"description"

"$string:entry_overlay_desc"

"deviceTypes": [

"deviceTypes"

"default",

"default"

"tablet",

"tablet"

],

"deliverywithInstall":true,

"deliverywithInstall"

"targetModuleName":"entry_module_name",

"targetModuleName"

"entry_module_name"

"targetPriority":1,

"targetPriority"

1

说明targetModuleName: 字符串类型，指定要overlay的应用中的目标module。targetPriority： 整数类型，指定overlay优先级。不支持Ability、ExtensionAbility、Permission等其他字段的配置。overlay不支持json类型的图片配置。

targetModuleName: 字符串类型，指定要overlay的应用中的目标module。targetPriority： 整数类型，指定overlay优先级。不支持Ability、ExtensionAbility、Permission等其他字段的配置。overlay不支持json类型的图片配置。

targetModuleName: 字符串类型，指定要overlay的应用中的目标module。

targetPriority： 整数类型，指定overlay优先级。

不支持Ability、ExtensionAbility、Permission等其他字段的配置。

overlay不支持json类型的图片配置。

在DevEco Studio中创建应用工程时，module的配置文件module.json5中包含targetModuleName和targetPriority字段时，该module将会在安装阶段被识别为overlay特征的module。overlay特征的module一般是为设备上存在的非overlay特征的module提供覆盖的资源文件，以便于targetModuleName指向的module在运行阶段可以使用overlay资源文件展示不同的颜色，标签，主题等等。

该功能默认使能，其使能及去使能请参考包管理接口。

